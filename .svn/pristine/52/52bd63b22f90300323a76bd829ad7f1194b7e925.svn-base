//==============================================================================================================================
package com.app.messenger;


//==============================================================================================================================
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.InputFilter;
import android.text.InputType;
import android.text.method.PasswordTransformationMethod;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

//------------------------------------------------------------------------------------------------------------------------------
import com.app.adapter.WorldGroupAdapter;
import com.app.model.GroupInfo;
import com.app.util.GlobalUtills;
import com.app.util.TransparentProgressDialog;
import com.app.webserviceshandler.WebServiceHandler;

//------------------------------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.List;

//------------------------------------------------------------------------------------------------------------------------------
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;


//==============================================================================================================================
public class HangoutFriendGroup extends Activity
{

    //--------------------------------------------------------------------------------------------------------------------------
    class GetGroupsHangoutByFriends extends AsyncTask<String, Void, String>
    {

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected void onPreExecute()
        {
            progressDialog_ = new TransparentProgressDialog(HangoutFriendGroup.this, R.drawable.loading_spinner_icon);

            super.onPreExecute();
        }

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected String doInBackground(String... params)
        {
            List<NameValuePair> param = new ArrayList<NameValuePair>();

            param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE, "post"));
            param.add(new BasicNameValuePair("mtype",                  "hangout_part_two"));
            param.add(new BasicNameValuePair("users",                  friendID_ + ""));

            Log.e("Param getGroupsHangout: ", "> " + param);

            WebServiceHandler web=new WebServiceHandler();

            String jsonString = web.makeServiceCall(GlobalConstant.URL, WebServiceHandler.GET, param);

            return jsonString;  // TODO:
        }

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected void onPostExecute(String result)
        {
            super.onPostExecute(result);

            try
            {
                if (result.equals("Error! Try Again"))
                {
                    progressDialog_.dismiss();

                    Log.e("post", "" + result);

                    Toast.makeText(HangoutFriendGroup.this, result, Toast.LENGTH_LONG).show();
                }
                else
                {
                    JSONObject jsonObject = new JSONObject(result);

                    message_ = jsonObject.getString("Message");

                    if (message_.equals("Success"))
                    {
                        progressDialog_.dismiss();

                        JSONArray arrayGroupInfo = jsonObject.getJSONArray("groupInfo");

                        if (arrayGroupInfo.length() > 0)
                        {
                            for (int i = 0; i < arrayGroupInfo.length(); ++i)
                            {
                                GroupInfo groupInfo = new GroupInfo();

                                JSONObject object  = arrayGroupInfo.getJSONObject(i);
                                String     groupID = object.getString("groupId");

                                groupInfo.setgroupId(groupID);

                                String groupName = object.getString("groupName");

                                groupInfo.setgroupName(groupName);

                                String groupImage = object.getString("groupImage");

                                groupInfo.setgroupImage(groupImage);

                                String groupTotalMembers = object.getString("groupTotalMembers");

                                groupInfo.setgroupTotalMembers(groupTotalMembers);

                                String groupType = object.getString("groupType");

                                groupInfo.setGroupType(groupType);

                                String groupPassword = object.getString("groupPassword");

                                groupInfo.setGroupPassword (groupPassword);
                                groupInfo.setGroupTotalmsgs(object.getString("groupMessageCount"));
                                groupInfo.setGroupTotalnew (object.getString("groupLastMessageCount"));
                                groupInfo.setUserStatus    (object.getString("user_status"));

                                worldGroupList_.add(groupInfo);
                            }

                            worldAdapter_ = new WorldGroupAdapter(HangoutFriendGroup.this, worldGroupList_);

                            listViewGroups_.setAdapter(worldAdapter_);
                            listViewGroups_.setOnItemClickListener(new OnItemClickListener()
                            {
                                @Override
                                public void onItemClick(AdapterView<?> parent, View view, final int position, long id)
                                {
                                    if ((worldGroupList_.get(position).getGroupType()).equalsIgnoreCase("PV") &&
                                        (worldGroupList_.get(position).getUserStatus()).equalsIgnoreCase("N"))
                                        openLogoutAlert(position);

                                    else
                                    {
                                        if (worldGroupList_.get(position).getUserStatus().equalsIgnoreCase("Y"))  // TODO:
                                            GlobalUtills.joinORadd_group = true;

                                        else
                                            GlobalUtills.joinORadd_group = false;

                                        Intent gotoChatting = new Intent(HangoutFriendGroup.this, GroupChat.class);

                                        gotoChatting.putExtra("groupID",    worldGroupList_.get(position).getgroupId());
                                        gotoChatting.putExtra("groupName",  worldGroupList_.get(position).getgroupName());
                                        gotoChatting.putExtra("groupImage", worldGroupList_.get(position).getgroupImage() + "");

                                        startActivity(gotoChatting);
                                    }
                                }
                            });
                        }
                        else
                        {
                            GlobalUtills.showToast("No Result Found..!", HangoutFriendGroup.this);

                            try
                            {
                                worldAdapter_ = new WorldGroupAdapter(HangoutFriendGroup.this, worldGroupList_);

                                worldAdapter_.notifyDataSetChanged();

                                listViewGroups_.setAdapter(worldAdapter_);
                            }
                            catch (Exception e)
                            {
                                GlobalUtills.showToast("No Groups Found..!", HangoutFriendGroup.this);

                                e.printStackTrace();
                            }
                        }
                    }
                    else
                    {
                        GlobalUtills.showToast("No Groups Found..!", HangoutFriendGroup.this);

                        progressDialog_.dismiss();
                    }
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }

        //----------------------------------------------------------------------------------------------------------------------
        TransparentProgressDialog progressDialog_;
        String                    message_ = "";
    }

    //--------------------------------------------------------------------------------------------------------------------------
    class JoinWorldGroupH extends AsyncTask<String, String, String>
    {

        //----------------------------------------------------------------------------------------------------------------------
        // TODO: c/p
        @Override
        protected String doInBackground(String... params)
        {
            String groupID = params[0];

            ArrayList<NameValuePair> param = new ArrayList<NameValuePair>();

            param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE,    "post"));
            param.add(new BasicNameValuePair(GlobalConstant.U_TYPE,       "join_group"));
            param.add(new BasicNameValuePair(GlobalConstant.Join_User_id, global_.getUser_id()));
            param.add(new BasicNameValuePair(GlobalConstant.Group_id,     groupID));

            try
            {
                WebServiceHandler web = new WebServiceHandler();

                responseJoinWorldGroup_ = web.makeServiceCall(GlobalConstant.URL, WebServiceHandler.GET, param);

                Log.e("Response of Join Group", "" + responseJoinWorldGroup_.toString());
            }
            catch (Exception exception)
            {
                exception.printStackTrace();

                System.out.println("Exception calling");
            }

            return responseJoinWorldGroup_;
        }

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected void onPreExecute()
        {
            super.onPreExecute();

            dialog_ = new TransparentProgressDialog(HangoutFriendGroup.this, R.drawable.loading_spinner_icon);

            dialog_.show();
        }

        //----------------------------------------------------------------------------------------------------------------------
        protected void onPostExecute(String result)
        {
            dialog_.dismiss();

            try
            {
                JSONObject jsonObject = new JSONObject(result);

                messageString_ = jsonObject.getString("Message");

                if (messageString_.equalsIgnoreCase("Success"))
                {
                    new AlertDialog.Builder(HangoutFriendGroup.this).setTitle("Join request sent").setMessage(
                            "If members of this group will accept your request,then you will become member of this group.")
                            .setNeutralButton("Ok", new DialogInterface.OnClickListener()
                            {
                                @Override
                                public void onClick(DialogInterface dialog, int which)
                                {
                                    dialog.dismiss();
                                }
                            }).show();
                }
                else
                    Toast.makeText(HangoutFriendGroup.this, messageString_, 200).show();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }

            super.onPostExecute(result);
        }

        //----------------------------------------------------------------------------------------------------------------------
        TransparentProgressDialog dialog_;
        String                    responseJoinWorldGroup_;
        String                    messageString_;
    }

    //--------------------------------------------------------------------------------------------------------------------------
    public void enterPasswordDialog(final int position)
    {
        AlertDialog.Builder alert = new AlertDialog.Builder(HangoutFriendGroup.this);

        alert.setTitle  ("Closed Group");
        alert.setMessage("Enter Password to access this Group");  // TODO:

        final EditText input = new EditText(HangoutFriendGroup.this);

        input.setHint                ("Please enter password..");
        input.setInputType           (InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
        input.setTransformationMethod(PasswordTransformationMethod.getInstance());

        int maxLength = 15;  // TODO:

        InputFilter[] fArray = new InputFilter[1];

        fArray[0] = new InputFilter.LengthFilter(maxLength);  // TODO:

        input.setFilters(fArray);

        alert.setView          (input);
        alert.setPositiveButton("OK", new DialogInterface.OnClickListener()
        {
            public void onClick(DialogInterface dialog, int whichButton)
            {
                String             psd = input.getText().toString().trim();
                InputMethodManager imm = (InputMethodManager) HangoutFriendGroup.this.getSystemService(
                                             Context.INPUT_METHOD_SERVICE);

                imm.hideSoftInputFromWindow(input.getWindowToken(), 0);

                if (psd.equals(worldGroupList_.get(position).getGroupPassword()))
                {
                    GlobalUtills.joinORadd_group = false;

                    Intent gotoChatting = new Intent(HangoutFriendGroup.this, GroupChat.class);

                    gotoChatting.putExtra("groupID",    worldGroupList_.get(position).getgroupId());
                    gotoChatting.putExtra("groupName",  worldGroupList_.get(position).getgroupName());
                    gotoChatting.putExtra("groupImage", worldGroupList_.get(position).getgroupImage() + "");

                    startActivity(gotoChatting);
                }
                else
                {
                    new AlertDialog.Builder(HangoutFriendGroup.this).setTitle("Warning").setMessage(
                            "Wrong password..! Please try again..").setNeutralButton("Ok", new DialogInterface.OnClickListener()
                            {
                                @Override
                                public void onClick(DialogInterface dialog, int which)
                                {
                                    dialog.dismiss();
                                }
                            }).show();
                }
            }
        });

        alert.setNegativeButton("CANCEL", new DialogInterface.OnClickListener()
        {
            public void onClick(DialogInterface dialog, int whichButton)
            {
                InputMethodManager imm = (InputMethodManager) HangoutFriendGroup.this.getSystemService(
                                             Context.INPUT_METHOD_SERVICE);

                imm.hideSoftInputFromWindow(input.getWindowToken(), 0);

                dialog.cancel();
            }
        });

        AlertDialog alertDialog = alert.create();

        alertDialog.show();
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_hangout_friend_group);

        global_          = new Global();
        globalUtills_    = new GlobalUtills();
        actionBarCommon_ = new ActionBarCommon(HangoutFriendGroup.this, null);  // TODO:
        actionBarCommon_ = (ActionBarCommon) findViewById(R.id.action_barH);

        actionBarCommon_.setActionText("Joined Groups");
        actionBarCommon_.leftImage().setImageResource(R.drawable.icon_back_arrow);
        actionBarCommon_.layoutLeft().setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                finish();
            }
        });

        listViewGroups_ = (ListView) findViewById(R.id.listViewGroupOfFriends);

        Intent getIntent_FrientID = getIntent();

        friendID_ = getIntent_FrientID.getStringExtra("FrndID");

        new GetGroupsHangoutByFriends().execute();
    }

    //--------------------------------------------------------------------------------------------------------------------------
    // TODO: c/p?
    private void openLogoutAlert(final int positionJ)
    {
        final Dialog   dialog = globalUtills_.prepararDialog(HangoutFriendGroup.this, R.layout.dialog_three_options);
              TextView title  = (TextView) dialog.findViewById(R.id.txtVmainTitle);

        title.setText("Closed Group");

        TextView subHeading = (TextView) dialog.findViewById(R.id.txtVsubheading);

        subHeading.setText("Its a closed group..!");

        Button      buttonChat   = (Button)      dialog.findViewById(R.id.btnChat);
        Button      buttonCall   = (Button)      dialog.findViewById(R.id.btncall);
        Button      buttonGroups = (Button)      dialog.findViewById(R.id.btngroups);
        ImageButton buttonClose  = (ImageButton) dialog.findViewById(R.id.btnCloseDialog);

        buttonClose.setVisibility(View.GONE);

        buttonGroups.setText("Join");
        buttonCall.setText("Enter Password");
        buttonChat.setText("Cancel");

        buttonChat.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                dialog.dismiss();
            }
        });

        buttonCall.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                enterPasswordDialog(positionJ);

                dialog.dismiss();
            }
        });

        buttonGroups.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                new JoinWorldGroupH().execute(worldGroupList_.get(positionJ).getgroupId());

                dialog.dismiss();
            }
        });

        dialog.show();
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private ListView             listViewGroups_;
    private ActionBarCommon      actionBarCommon_;
    private String               friendID_ = "";
    private Global               global_;
    private ArrayList<GroupInfo> worldGroupList_  = new ArrayList<GroupInfo>();
    private WorldGroupAdapter    worldAdapter_;
    private GlobalUtills         globalUtills_;
}
