package com.app.messenger;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Notification;
import android.app.Notification.Builder;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;

import com.app.model.FriendInfo;
import com.app.model.ListALLGroups;
import com.app.util.GlobalUtills;
import com.google.android.gcm.GCMBaseIntentService;
import com.google.android.gcm.GCMRegistrar;

public class GCMIntentService extends GCMBaseIntentService
{

	private static final String	TAG		= "GCMIntentService";
	String						status;
	Bundle						bun;
	String						count	= "";
	static int					flag	= 0;

	public GCMIntentService()
	{
		super(CommonUtilities.SENDER_ID);
	}

	@Override
	protected void onRegistered(Context context, String registrationId)
	{

		ServerUtilities.register(context, registrationId);
	}

	@Override
	protected void onUnregistered(Context context, String registrationId)
	{

		if( GCMRegistrar.isRegisteredOnServer(context) )
		{
			ServerUtilities.unregister(context, registrationId);
		}
	}

	@Override
	protected void onMessage(final Context context, Intent intent)
	{
		try
		{

			bun = intent.getExtras();
			String message = intent.getStringExtra("message");

			System.out.println("+++++++++++++++GCM message++++++++++++++++++++++" + message);

			final JSONObject jsonNoTi = new JSONObject(message);
			flag = Integer.valueOf(jsonNoTi.getString("flag"));

			// String MessageNoti = jsonNoTi.getString("message");
			String MessageNoti = "";
			GlobalUtills.IntentWHeretoGo = flag;

			SharedPreferences sharedPref = context.getSharedPreferences("login", Context.MODE_PRIVATE);
			Editor editorPref = sharedPref.edit();
			if( flag == 0 )
			{

				GlobalUtills.msgCountSingle = jsonNoTi.getString("count");

				count = jsonNoTi.getString("count1");

				ChatFragment.newmsg = true;

				JSONArray temp_json_array = jsonNoTi.getJSONArray("facebook_id");
				GlobalUtills.single_msg_sender.clear();
				// for (int j = 0; j < temp_json_array.length(); j++) {
				// // JSONObject temp_json_obj =
				// // temp_json_array.getJSONObject(j);
				final String temp_fb_id = (String) temp_json_array.get(0);
				GlobalUtills.single_msg_sender.add(temp_fb_id);
				// }
				// editorPref.putString("msgsender_single",
				// temp_json_array.toString());

				MessageNoti = "You have " + GlobalUtills.msgCountSingle + " new messages from " + jsonNoTi.getJSONArray("display_name").getString(0);

				if( Chat_OneToOne.RefreshChat )
				{
					if( Chat_OneToOne.FbID.contains(GlobalUtills.single_msg_sender.get(0)) )
					{
						Chat_OneToOne.generateNOti = true;

					}
					else
					{
						if( GlobalUtills.allNotification )
						{
							generateNotification(context, MessageNoti);
						}
						editorPref.putBoolean("notification_flag_single_chat", true);
						editorPref.putString("msgcount", GlobalUtills.msgCountSingle);
						editorPref.commit();
					}

				}
				else
				{

					if( GlobalUtills.allNotification )
					{
						generateNotification(context, MessageNoti);
					}
					editorPref.putBoolean("notification_flag_single_chat", true);
					editorPref.putString("msgcount", GlobalUtills.msgCountSingle);
					editorPref.commit();

				}

				Handler handler = new Handler(Looper.getMainLooper());
				handler.post(new Runnable()
				{
					public void run()
					{

						try
						{

							if( GlobalUtills.badge1 != null )
							{
								GlobalUtills.badge1.setText("" + GlobalUtills.msgCountSingle);
								if( !GlobalUtills.badge1.isShown() )
								{
									GlobalUtills.badge1.toggle();
								}

							}

							if( ChatFragment.newSingleMSG )
							{

								if( ChatFragment.Groupmember.equals("C") )
								{

									boolean addchat = true;

									for( int g = 0; g < ChatFragment.ChatfrndList_recent.size(); g++ )
									{

										if( GlobalUtills.single_msg_sender.get(0).toString().contains(ChatFragment.ChatfrndList_recent.get(g).getId()) )
										{
											FriendInfo update = new FriendInfo();
											update.setId(ChatFragment.ChatfrndList_recent.get(g).getId());
											update.setName(ChatFragment.ChatfrndList_recent.get(g).getName());
											update.setMobile_no(ChatFragment.ChatfrndList_recent.get(g).getMobile_no());

											update.setUnread_count(count + "");

											ChatFragment.ChatfrndList_recent.remove(g);

											ChatFragment.ChatfrndList_recent.add(0, update);

											addchat = false;
											break;
										}

									}

									if( addchat )
									{
										FriendInfo updateNEw = new FriendInfo();
										updateNEw.setId(GlobalUtills.single_msg_sender.get(0));
										updateNEw.setName(jsonNoTi.getJSONArray("display_name").getString(0));
										updateNEw.setMobile_no(jsonNoTi.getJSONArray("user_telephone").getString(0));

										updateNEw.setUnread_count(count + "");

										ChatFragment.ChatfrndList_recent.add(0, updateNEw);
									}

									ChatFragment.recentchatAdapter.notifyDataSetChanged();

								}

								else if( ChatFragment.Groupmember.equals("PH") )
								{

									for( int g = 0; g < ChatFragment.completeListOFfrnds.size(); g++ )
									{

										if( !ChatFragment.completeListOFfrnds.get(g).getId().equals("") )
										{

											if( GlobalUtills.single_msg_sender.get(0).toString().contains(ChatFragment.completeListOFfrnds.get(g).getId()) )
											{
												FriendInfo update = new FriendInfo();
												update.setId(ChatFragment.completeListOFfrnds.get(g).getId());
												update.setName(ChatFragment.completeListOFfrnds.get(g).getName());
												update.setMobile_no(ChatFragment.completeListOFfrnds.get(g).getMobile_no());

												update.setUnread_count(count + "");

												ChatFragment.completeListOFfrnds.remove(g);

												ChatFragment.completeListOFfrnds.add(0, update);

												break;
											}

										}

									}

									ChatFragment.phoneContactAdapter.notifyDataSetChanged();

								}
								else if( ChatFragment.Groupmember.equals("FB_M") )
								{

									for( int g = 0; g < ChatFragment.list_of_users.size(); g++ )
									{

										if( GlobalUtills.single_msg_sender.get(0).toString().contains(ChatFragment.list_of_users.get(g).getId()) )
										{
											FriendInfo update = new FriendInfo();
											update.setId(ChatFragment.list_of_users.get(g).getId());
											update.setName(ChatFragment.list_of_users.get(g).getName());
											update.setMobile_no(ChatFragment.list_of_users.get(g).getMobile_no());

											update.setUnread_count(count + "");

											ChatFragment.list_of_users.remove(g);

											ChatFragment.list_of_users.add(0, update);

											break;
										}

									}

									ChatFragment.socialusers.notifyDataSetChanged();

								}

							}
						}
						catch(Exception e)
						{
							e.printStackTrace();
						}
						catch(Error e)
						{
							e.printStackTrace();
						}
					}
				});

			}
			else if( flag == 1 )
			{

				GlobalUtills.msgCountGroup = "";
				GlobalUtills.msgCountGroup = jsonNoTi.getString("count");
				final String count_msg_This = jsonNoTi.getString("tcount");

				GlobalUtills.group_msg_sender.clear();

				final String temp_groupID = jsonNoTi.getString("group_id");

				// String temp_group_id = (String) temp_json_array.get(0);
				GlobalUtills.group_msg_sender.add(temp_groupID);

				// }

				MessageNoti = "You have " + GlobalUtills.msgCountGroup + " new message(s) in your groups.";
				// + jsonNoTi.getString("group_name");

				if( Group_Chat.RefreshChat_G )
				{

					if( Group_Chat.GroupID.contains(temp_groupID) )
					{
						Chat_OneToOne.generateNOti = true;
					}
					else
					{
						if( GlobalUtills.allNotification )
						{
							generateNotification(context, MessageNoti);
						}
						editorPref.putBoolean("notification_flag_mychat", true);
						editorPref.putString("msgcountG", GlobalUtills.msgCountGroup);
						editorPref.commit();
					}

				}
				else
				{
					if( GlobalUtills.allNotification )
					{
						generateNotification(context, MessageNoti);
					}
					editorPref.putBoolean("notification_flag_mychat", true);
					editorPref.putString("msgcountG", GlobalUtills.msgCountGroup);
					editorPref.commit();
				}

				Handler handler = new Handler(Looper.getMainLooper());
				handler.post(new Runnable()
				{
					public void run()
					{
						try
						{

							if( GlobalUtills.badgeGroup != null )
							{
								GlobalUtills.badgeGroup.setText("" + GlobalUtills.msgCountGroup);

								if( !GlobalUtills.badgeGroup.isShown() )
								{
									GlobalUtills.badgeGroup.toggle();
								}

							}

							if( GroupsFragment.newgroup_msg )
							{

								for( int g = 0; g < GroupsFragment.list_of_allgroup.size(); g++ )
								{

									if( temp_groupID.contains(GroupsFragment.list_of_allgroup.get(g).getGroupId()) )
									{
										ListALLGroups allGroups = new ListALLGroups();
										allGroups.setTotalmembers(GroupsFragment.list_of_allgroup.get(g).getTotalmembers());

										allGroups.setTotalmsgs(GroupsFragment.list_of_allgroup.get(g).getTotalmsgs());
										allGroups.setTotalnew(GroupsFragment.list_of_allgroup.get(g).getTotalnew());

										allGroups.setGroupId(GroupsFragment.list_of_allgroup.get(g).getGroupId());

										allGroups.setUserId(GroupsFragment.list_of_allgroup.get(g).getUserId());

										allGroups.setName(GroupsFragment.list_of_allgroup.get(g).getName());

										allGroups.setImage(GroupsFragment.list_of_allgroup.get(g).getImage());

										allGroups.setAddedDate(GroupsFragment.list_of_allgroup.get(g).getAddedDate());
										allGroups.setType(GroupsFragment.list_of_allgroup.get(g).getType());

										allGroups.setUnread(count_msg_This);

										GroupsFragment.list_of_allgroup.remove(g);

										GroupsFragment.list_of_allgroup.add(0, allGroups);

										break;
									}

								}

								GroupsFragment.groupAdapter.notifyDataSetChanged();
							}
						}
						catch(Exception e)
						{
							e.printStackTrace();
						}
						catch(Error e)
						{
							e.printStackTrace();
						}

					}

				});

			}
			else if( flag == 2 )
			{
				MessageNoti = jsonNoTi.getString("msg");
				editorPref.putBoolean("notification_flag_adgroup", true);
				editorPref.commit();
			}
			else if( flag == 3 )
			{

				try
				{

					GlobalUtills.msgCountSingle = "";

					MessageNoti = jsonNoTi.getString("msg");
					String ID_fb = jsonNoTi.getString("facebook_id");

					SharedPreferences sharedChatDataS = context.getSharedPreferences("Chat", Context.MODE_PRIVATE);
					Editor editSHared = sharedChatDataS.edit();
					editSHared.remove(ID_fb);
					editSHared.commit();

					if( GlobalUtills.badge1 != null && GlobalUtills.badge1.isShown() )
					{
						GlobalUtills.badge1.toggle();
					}

					if( Chat_OneToOne.RefreshChat )
					{

						Handler handler = new Handler(Looper.getMainLooper());
						handler.post(new Runnable()
						{
							public void run()
							{
								Chat_OneToOne c = new Chat_OneToOne();
								c.clrChat(context);
							}
						});

					}

				}
				catch(Exception e)
				{
					e.printStackTrace();
				}

			}
			else if( flag == 4 )
			{
				MessageNoti = jsonNoTi.getString("msg");
				editorPref.putBoolean("notification_flag_add_menber", true);
				editorPref.commit();
			}
			else if( flag == 5 )
			{

			}
			else if( flag == 6 )
			{
				MessageNoti = jsonNoTi.getString("msg");
				editorPref.putBoolean("notification_flag_approve_request", true);
				editorPref.commit();
			}
			else if( flag == 7 )
			{
				MessageNoti = jsonNoTi.getString("msg");
				editorPref.putBoolean("notification_flag_join_gorup", true);
				editorPref.commit();
			}
			else if( flag == 8 )
			{
				MessageNoti = jsonNoTi.getString("msg");
				editorPref.putBoolean("notification_flag_approve_join_gorup", true);
				editorPref.commit();
			}
			else
			{

			}

			if( GlobalUtills.allNotification )
			{

				if( flag == 3 )
				{
					GlobalUtills.delete_chat_notification = false;
					generateNotification(context, MessageNoti);
				}

				if( flag == 2 || flag == 4 || flag == 5 || flag == 6 || flag == 7 || flag == 8 )
				{
					generateNotification(context, MessageNoti);
				}

			}

		}
		catch(Exception e)
		{
			Log.e(TAG, "Inside Exception onMessage -> " + e.toString());
		}
		catch(Error e)
		{
			e.printStackTrace();
		}
		catch(Throwable e)
		{
			e.printStackTrace();
		}
	}

	@Override
	protected void onDeletedMessages(Context context, int total)
	{
		Log.i(TAG, "Received deleted messages notification");
		// String message = getString(R.string.gcm_deleted, total);
		// generateNotification(context, message);
	}

	@Override
	public void onError(Context context, String errorId)
	{
		Log.i(TAG, "Received error: " + errorId);

	}

	@Override
	protected boolean onRecoverableError(Context context, String errorId)
	{
		// log message
		Log.i(TAG, "Received recoverable error: " + errorId);
		return super.onRecoverableError(context, errorId);
	}

	private static void generateNotification(Context context, String message)
	{

		try
		{

			int icon = R.drawable.app_icon_g;

			NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
			String title = "Get Groupy" + "";

			// ActivityManager am =
			// (ActivityManager)context.getSystemService(ACTIVITY_SERVICE);
			// List<ActivityManager.RunningTaskInfo> tasks =
			// am.getRunningTasks(1);
			// ActivityManager.RunningTaskInfo task = tasks.get(0); // Should be
			// my task
			// ComponentName rootActivity = task.baseActivity;

			Intent notificationIntent;
			PendingIntent intent;
			// if(rootActivity.getPackageName().equalsIgnoreCase("com.app.messenger"))
			// {
			//
			// Intent it = new Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
			// context.sendBroadcast(it);
			//
			// intent = PendingIntent.getActivity(context, 0,
			// it , PendingIntent.FLAG_UPDATE_CURRENT);
			//
			//
			//
			//
			//
			// }
			// else
			// {
			if( GlobalUtills.isApplicationRunningBackground(context) )
			{
				notificationIntent = new Intent(context, Blank_activity.class);
				// notificationIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
			}
			else
			{

				// SharedPreferences sharedPref =
				// context.getSharedPreferences("login", MODE_PRIVATE);
				// if(!sharedPref.contains("icon"))
				// {
				notificationIntent = new Intent(context, Splash_bro.class);
				// }
				// else
				// {
				// notificationIntent = new Intent();
				// notificationIntent.setClassName("com.app.messenger",
				// "com.app.messenger.Splash2");
				// }
				// notificationIntent =
				// context.getPackageManager().getLaunchIntentForPackage("com.app.messenger");
				// notificationIntent = new
				// Intent("com.app.messenger.SplashActivity");
				// notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
				//
				// notificationIntent.setAction(Intent.ACTION_MAIN);
				// notificationIntent.addCategory(Intent.CATEGORY_LAUNCHER);

			}

			intent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);

			// }

			Uri defaultSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);

			if( defaultSound == null )
			{
				defaultSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
				if( defaultSound == null )
				{
					defaultSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
				}
			}

			Builder builder = new Notification.Builder(context).setContentTitle(title).setContentText(message).setContentIntent(intent).setSmallIcon(icon).setLights(Color.GREEN, 1, 2)
					.setAutoCancel(true).setSound(defaultSound);

			Notification not = new Notification.BigTextStyle(builder).bigText(message).build();

			// builder.setStyle(new
			// Notification.BigTextStyle().bigText(message)) ;

			not.defaults |= Notification.DEFAULT_VIBRATE;
			not.defaults |= Notification.DEFAULT_SOUND;

			notificationManager.notify(flag, not);

			if( !GlobalUtills.isApplicationRunningBackground(context) )
			{
				SharedPreferences sharedPref = context.getSharedPreferences("login", MODE_PRIVATE);
				if( !sharedPref.contains("icon") )
				{
					Editor ed = sharedPref.edit();
					ed.putInt("icon", flag);
					ed.apply();

					PackageManager pm = context.getPackageManager();

					String lastEnabled = ""; // Getting last enabled from shared
												// preference

					lastEnabled = "com.app.messenger.SplashActivity";

					ComponentName componentName = new ComponentName("com.app.messenger", lastEnabled);
					pm.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP);

					// Log.i("DEMO", "Removing : " + lastEnabled);

					lastEnabled = "com.app.messenger.Splash2";

					componentName = new ComponentName("com.app.messenger", lastEnabled);
					pm.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);
				}
			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

	}

}
