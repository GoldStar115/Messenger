package com.app.messenger;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.InputFilter;
import android.text.InputType;
import android.text.method.PasswordTransformationMethod;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.app.adapter.ShowSocialFriends;
import com.app.adapter.WorldGroupAdapter;
import com.app.model.FriendInfo;
import com.app.model.GroupInfo;
import com.app.util.GlobalUtills;
import com.app.util.TransparentProgressDialog;
import com.app.webserviceshandler.WebServiceHandler;

public class HangoutFragment extends Fragment {
	ActionBarCommon actionBarCommon;
	ListView listviewWorldGroup, listVGroupsHangout;
	ArrayList<HashMap<String, String>> list_of_allgroup;

	Button btnFB, btnFBgroups;

	View viewFBfrnds, viewFBgroupMem;

	ArrayList<FriendInfo> list_of_allfriendHangout = new ArrayList<FriendInfo>();
	Global global;
	ShowSocialFriends friend_adapter;

	static String FriendID = "", allFriendsID = "";

	// ArrayList<String> groupName;
	// ArrayList<String> groupImage;
	// ArrayList<String> groupTotalMembers;

	ArrayList<GroupInfo> list_of_world_group = new ArrayList<GroupInfo>();
	WorldGroupAdapter world_adapter;
	
	GlobalUtills globalUtills;
	

	@Override
	public void onResume() {
		
		
	
		
		
		
		
		
		super.onResume();
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		container = (ViewGroup) inflater.inflate(R.layout.hangout_activity,
				container, false);
		actionBarCommon = new ActionBarCommon(getActivity(), null);
		gettingValues(container);
		actionBarCommon.setActionText("HangOuts");
		global = new Global();
	
		globalUtills=new GlobalUtills();
		

		// --------------------------Set Adapter ------------------
		// HangoutAdapter hangoutAdapter = new HangoutAdapter(getActivity(),
		// list_of_allgroup) ;
		// listviewWorldGroup.setAdapter(hangoutAdapter);

		listviewWorldGroup.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {

				FriendID = "";
				FriendID = list_of_allfriendHangout.get(position).getId();
				System.out.println(FriendID + "friend's id");

				Intent gotoHangout_groups = new Intent(getActivity(),
						Hangout_friendGroup.class);
				gotoHangout_groups.putExtra("FrndID", FriendID + "");
				startActivity(gotoHangout_groups);
			}
		});

		btnFB.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				btnFB.setTextColor(getResources().getColor(R.color.pinkNew));
				btnFBgroups.setTextColor(Color.parseColor("#000000"));
				listVGroupsHangout.setVisibility(View.GONE);
				listviewWorldGroup.setVisibility(View.VISIBLE);

				viewFBfrnds.setVisibility(View.VISIBLE);
				viewFBgroupMem.setVisibility(View.INVISIBLE);

				Collections.sort(list_of_allfriendHangout,
						new Comparator<FriendInfo>() {
							@Override
							public int compare(FriendInfo text1,
									FriendInfo text2) {
								return text1.getName()
										.compareToIgnoreCase(
												text2.getName());
							}
						});


				friend_adapter = new ShowSocialFriends(getActivity(),
						list_of_allfriendHangout,false,false);
				listviewWorldGroup.setAdapter(friend_adapter);

			}
		});

		btnFBgroups.setOnClickListener(new OnClickListener() 
		{

			@Override
			public void onClick(View v) 
			{

				btnFBgroups.setTextColor(getResources().getColor(R.color.pinkNew));
				btnFB.setTextColor(Color.parseColor("#000000"));
				viewFBfrnds.setVisibility(View.INVISIBLE);
				viewFBgroupMem.setVisibility(View.VISIBLE);

				listviewWorldGroup.setVisibility(View.GONE);
				listVGroupsHangout.setVisibility(View.VISIBLE);
				allFriendsID = "";
				for (int gFb = 0; gFb < list_of_allfriendHangout.size(); gFb++) {

					if (allFriendsID.equals("")) {
						allFriendsID = list_of_allfriendHangout.get(gFb).getId();
					} else {
						allFriendsID = allFriendsID + ","
								+ list_of_allfriendHangout.get(gFb).getId();
					}

				}

				new getGroupsHangout().execute();

			}
		});
		
		
		
		if (list_of_allfriendHangout.size() > 0) {
			list_of_allfriendHangout.clear();
		}

		
		allFriendsID = "";
		if(list_of_allfriendHangout.size()>0)
		{
		
		}
		else
		{
			SetFriendInfo_Json();
		}
		
		for (int gFb = 0; gFb < list_of_allfriendHangout.size(); gFb++) {

			if (allFriendsID.equals("")) {
				allFriendsID = list_of_allfriendHangout.get(gFb).getId();
			} else {
				allFriendsID = allFriendsID + ","
						+ list_of_allfriendHangout.get(gFb).getId();
			}

		}
		
		
		btnFBgroups.setTextColor(getResources().getColor(R.color.pinkNew));
		btnFB.setTextColor(Color.parseColor("#000000"));
		viewFBfrnds.setVisibility(View.INVISIBLE);
		viewFBgroupMem.setVisibility(View.VISIBLE);

		listviewWorldGroup.setVisibility(View.GONE);
		listVGroupsHangout.setVisibility(View.VISIBLE);
		
		
		if(globalUtills.haveNetworkConnection(getActivity()))
		{
			new getGroupsHangout().execute();
		}
		

		return container;

	}

	// ----------------GettingValues-----------------
	private void gettingValues(ViewGroup container) {
		listviewWorldGroup = (ListView) container
				.findViewById(R.id.list_my_hangOut);
		actionBarCommon = (ActionBarCommon) container
				.findViewById(R.id.action_bar);

		listVGroupsHangout = (ListView) container
				.findViewById(R.id.list_Groups_hangOut);

		btnFB = (Button) container.findViewById(R.id.btnFBfriendsHangout);

		btnFBgroups = (Button) container.findViewById(R.id.btnFbGroupHangout);

		viewFBfrnds = (View) container.findViewById(R.id.viewbtnFBfrndsHangout);
		viewFBgroupMem = (View) container
				.findViewById(R.id.viewbtnFBgroupHangout);

	}

	class getGroupsHangout extends AsyncTask<String, Void, String> {

		TransparentProgressDialog pd;

		String message = "";

		@Override
		protected void onPreExecute() {

			pd =new TransparentProgressDialog(getActivity(), R.drawable.loading_spinner_icon);
			
			if(list_of_world_group.isEmpty())
			{
				pd.show();
			}
			
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(String... params) {

			// messenger.amebasoftware.com/webservice/get_posts/?post_type=post&mtype=hangout_part_two&users=10205308748540409,1043319082360184,1742544022637600,761027393946902,1505284763054326

			String jsonString="";
			try {
				
			
			List<NameValuePair> param = new ArrayList<NameValuePair>();
			param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE, "post"));
			param.add(new BasicNameValuePair("mtype", "hangout_part_two"));
			param.add(new BasicNameValuePair("users", allFriendsID + ""));
			param.add(new BasicNameValuePair("userId", global.getUser_id()+ ""));

			Log.e("Param getGroupsHangout: ", "> " + param);
			WebServiceHandler web=new WebServiceHandler();
			 jsonString = web.makeServiceCall(
					GlobalConstant.URL, WebServiceHandler.GET, param);

			
			Log.i("jsonString----->", jsonString);
			
			
			} catch (Exception e) {
				e.printStackTrace();
			}
			return jsonString;

		}

		@Override
		protected void onPostExecute(String result) {
			super.onPostExecute(result);
			try {
				
				if (result.equals("Error! Try Again")) {
					if(pd.isShowing())
					{
						pd.dismiss();
					}
					GlobalUtills.showToast("No network connection..!", getActivity());
				} else {
					JSONObject jsonObject = new JSONObject(result);
					message = jsonObject.getString("Message");
					if (message.equals("Success")) {
						if(pd.isShowing())
						{
							pd.dismiss();
						}
						list_of_world_group.clear();

						JSONArray array_groupInfo = jsonObject
								.getJSONArray("groupInfo");
						if (array_groupInfo.length() > 0) {

							for (int i = 0; i < array_groupInfo.length(); i++) {
								GroupInfo groupInfo = new GroupInfo();

								JSONObject array_object = array_groupInfo
										.getJSONObject(i);
								String group_id = array_object
										.getString("groupId");
								groupInfo.setgroupId(group_id);

								String groupName = array_object
										.getString("groupName");
								groupInfo.setgroupName(groupName);

								String groupImage = array_object
										.getString("groupImage");
								groupInfo.setgroupImage(groupImage);

								String groupTotalMembers = array_object
										.getString("groupTotalMembers");
								groupInfo
										.setgroupTotalMembers(groupTotalMembers);

								String groupType = array_object
										.getString("groupType");
								groupInfo.setGroupType(groupType);

								String groupPassword = array_object
										.getString("groupPassword");
								groupInfo.setGroupPassword(groupPassword);

								groupInfo.setGroupTotalmsgs(array_object
										.getString("groupMessageCount"));
								groupInfo.setGroupTotalnew(array_object
										.getString("groupLastMessageCount"));
								groupInfo.setUserStatus(array_object
										.getString("user_status"));

								list_of_world_group.add(groupInfo);
							}
							world_adapter = new WorldGroupAdapter(
									getActivity(), list_of_world_group);

							listVGroupsHangout.setAdapter(world_adapter);

							listVGroupsHangout
									.setOnItemClickListener(new OnItemClickListener() {

										@Override
										public void onItemClick(
												AdapterView<?> parent,
												View view, final int position,
												long id) {

											if ((list_of_world_group
													.get(position)
													.getGroupType())
													.equalsIgnoreCase("PV")
													&& (list_of_world_group
															.get(position)
															.getUserStatus())
															.equalsIgnoreCase("N"))
											{
												openLogoutAlert(position);
											}
											
											
											else {

												if (list_of_world_group
														.get(position)
														.getUserStatus()
														.equalsIgnoreCase("Y")) {
													GlobalUtills.joinORadd_group = true;
												} else {
													GlobalUtills.joinORadd_group = false;
												}

												Intent gotoChatting = new Intent(
														getActivity(),
														Group_Chat.class);
												gotoChatting.putExtra(
														"groupID",
														list_of_world_group
																.get(position)
																.getgroupId());
												gotoChatting
														.putExtra(
																"groupName",
																list_of_world_group
																		.get(position)
																		.getgroupName());
												
												gotoChatting.putExtra("groupImage",
														list_of_world_group
														.get(position)
														.getgroupImage() + "");
												
												
												
												startActivity(gotoChatting);
											}

										}
									});

						} else {

							GlobalUtills.showToast("No Groups Found..!",
									getActivity());
							try {
								world_adapter = new WorldGroupAdapter(
										getActivity(), list_of_world_group);

								world_adapter.notifyDataSetChanged();
								listVGroupsHangout.setAdapter(world_adapter);

							} catch (Exception e) {
								e.printStackTrace();
							}

							//
						}

					} else {
						GlobalUtills.showToast("No Groups Found..!",
								getActivity());
						if(pd.isShowing())
						{
							pd.dismiss();
						}

					}
				}

			} catch (Exception e) {
				if(pd.isShowing())
				{
					pd.dismiss();
				}
				e.printStackTrace();
			}

		}

	}

	

	class Join_worldGroup_H extends AsyncTask<String, String, String> {
		TransparentProgressDialog dialog;
		String response_JoinWorldGroup;
		String messaString;

		@Override
		protected String doInBackground(String... params) {
			
			try {
				
			
			
			String GroupID = params[0];
			ArrayList<NameValuePair> param = new ArrayList<NameValuePair>();
			param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE, "post"));

			param.add(new BasicNameValuePair(GlobalConstant.U_TYPE,
					"join_group"));
			param.add(new BasicNameValuePair(GlobalConstant.Join_User_id,
					global.getUser_id()));
			param.add(new BasicNameValuePair(GlobalConstant.Group_id, GroupID));

			try {
				WebServiceHandler web=new WebServiceHandler();
				response_JoinWorldGroup = web
						.makeServiceCall(
								GlobalConstant.URL,
								WebServiceHandler.GET, param);
				Log.e("Response of Join Group",
						"" + response_JoinWorldGroup.toString());

			} catch (Exception exception)

			{
				exception.printStackTrace();
				System.out.println("Exception calling");
			}

			
			
			} catch (Exception e) {
				e.printStackTrace();
			}
			return response_JoinWorldGroup;

		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			
			dialog =new TransparentProgressDialog(getActivity(), R.drawable.loading_spinner_icon);
			dialog.show();

		}

		protected void onPostExecute(String result) {

			

			try {
				dialog.dismiss();
				JSONObject jsonObject = new JSONObject(result);
				messaString = jsonObject.getString("Message");

				if (messaString.equalsIgnoreCase("Success")) {

					/*new AlertDialog.Builder(getActivity())
							.setTitle("Join request sent")
							.setMessage(
									"If members of this group will accept your request,then you will become member of this group.")
							.setNeutralButton("Ok",
									new DialogInterface.OnClickListener() {

										@Override
										public void onClick(
												DialogInterface dialog,
												int which) {

											dialog.dismiss();
										}
									}).show();*/
					
					globalUtills.DialogOK(getActivity(), "Join Request Sent", "If members of this group will accept your request,then you will become member of this group.");
					
					

				} else {
					Toast.makeText(getActivity(), messaString, 200).show();
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			super.onPostExecute(result);
		}
	}

	public void EnterpasswordDialog(final int position) {
		// dialog
		AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());
		alert.setTitle("Closed Group"); // Set Alert dialog title here
		alert.setMessage("Enter Password to access this Group"); // Message here

		// Set an EditText view to get user input
		final EditText input = new EditText(getActivity());
		input.setHint("Please enter password..");
		input.setInputType(InputType.TYPE_CLASS_TEXT
				| InputType.TYPE_TEXT_VARIATION_PASSWORD);
		input.setTransformationMethod(PasswordTransformationMethod
				.getInstance());
		int maxLength = 15;
		InputFilter[] fArray = new InputFilter[1];
		fArray[0] = new InputFilter.LengthFilter(maxLength);
		input.setFilters(fArray);

		alert.setView(input);

		alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {

				String psd = input.getText().toString().trim();

				InputMethodManager imm = (InputMethodManager) getActivity()
						.getSystemService(Context.INPUT_METHOD_SERVICE);
				imm.hideSoftInputFromWindow(input.getWindowToken(), 0);

				if (psd.equals(list_of_world_group.get(position)
						.getGroupPassword())) {

					GlobalUtills.joinORadd_group = false;

					Intent gotoChatting = new Intent(getActivity(),
							Group_Chat.class);
					gotoChatting.putExtra("groupID",
							list_of_world_group.get(position).getgroupId());
					gotoChatting.putExtra("groupName",
							list_of_world_group.get(position).getgroupName());
					
					gotoChatting.putExtra("groupImage",
							list_of_world_group
							.get(position)
							.getgroupImage() + "");
					
					
					startActivity(gotoChatting);
				} else {
					
					
					globalUtills.DialogOK(getActivity(), "Warning..!","Wrong password..! Please try again..");
			
				}

			} // End of onClick(DialogInterface dialog, int whichButton)
		}); // End of alert.setPositiveButton
		alert.setNegativeButton("CANCEL",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						InputMethodManager imm = (InputMethodManager) getActivity()
								.getSystemService(Context.INPUT_METHOD_SERVICE);
						imm.hideSoftInputFromWindow(input.getWindowToken(), 0);
						dialog.cancel();
					}
				}); // End of alert.setNegativeButton
		AlertDialog alertDialog = alert.create();
		alertDialog.show();
		// dialog end

	}
	
	
	
	
	
	
	
	
//	dialog
	 void openLogoutAlert(final int positionJ) {
			final Dialog dialog = globalUtills.prepararDialog(getActivity(),
					R.layout.dialog_three_options);
		

		
			TextView title = (TextView) dialog
					.findViewById(R.id.txtVmainTitle);
			title.setText("Closed Group");
			
			TextView subheading = (TextView) dialog
					.findViewById(R.id.txtVsubheading);
			subheading.setText("Its a closed group..!");
			
			

			Button btn_Chat = (Button) dialog.findViewById(R.id.btnChat);
			Button btn_call = (Button) dialog.findViewById(R.id.btncall);
			Button btn_groups = (Button) dialog.findViewById(R.id.btngroups);
			ImageButton btn_close = (ImageButton) dialog.findViewById(R.id.btnCloseDialog);
			
			btn_close.setVisibility(View.GONE);
			btn_groups.setText("Join");
			btn_call.setText("Enter Password");
			btn_Chat.setText("Cancel");
			
			
			btn_Chat.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {

					dialog.dismiss();

				}
			});
			btn_call.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {

					EnterpasswordDialog(positionJ);
					dialog.dismiss();

					}
			});
			btn_groups.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {

					new Join_worldGroup_H()
					.execute(list_of_world_group
							.get(positionJ)
							.getgroupId());

			dialog.dismiss();

				}
			});
		
			
			dialog.show();

		}
//	end dialog
	
	
	
	
//	set fb friends 
	 public void SetFriendInfo_Json() {
			try {
				// creating JSONaqDa


				ArrayList<HashMap<String, String>> friend_list_array = new ArrayList<HashMap<String, String>>();

				SharedPreferences sharedPref = getActivity().getSharedPreferences(
						"FacebookFrnd", Context.MODE_PRIVATE);
				String friend_list = sharedPref.getString("FriendList", "");

				JSONArray jSonArr = new JSONArray();
				
				JSONArray jarr = new JSONArray(friend_list);
				for (int i = 0; i < jarr.length(); i++) {
					JSONObject obj = jarr.getJSONObject(i);
					JSONObject picture = obj.getJSONObject("picture");
					JSONObject jsonObject_url = picture.getJSONObject("data");

					String id = obj.getString("id");
					FriendInfo friendInfo = new FriendInfo();
					String IMAGE_URL = jsonObject_url.getString("url");

					Log.e("Friend ID", id);
					friendInfo.setId(id);
					String name = obj.getString("name");
					friendInfo.setImage(IMAGE_URL);

					HashMap<String, String> map = new HashMap<String, String>();
					map.put("id", id);
					friend_list_array.add(map);
					JSONObject pnObj = new JSONObject();
					pnObj.put("userid", id);
					Log.e("list of friends ", "" + friend_list_array.size());
					Log.e("Friends Detail  ", "" + friend_list_array.toString());
					jSonArr.put(pnObj);

					friendInfo.setName(name);
					friendInfo.setUnread_count("");
					// friend_info_list.add(friendInfo);
					list_of_allfriendHangout.add(friendInfo);
				
				}

			}catch(Exception e)
			{
				e.printStackTrace();
			}
		
			
		}
//	 end fb friends
	 
	
	

}
