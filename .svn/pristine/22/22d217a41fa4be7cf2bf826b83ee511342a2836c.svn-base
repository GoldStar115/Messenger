//==============================================================================================================================
package com.app.messenger;


//==============================================================================================================================
import android.app.ActionBar.LayoutParams;
import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.text.InputFilter;
import android.text.Spanned;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

//------------------------------------------------------------------------------------------------------------------------------
import com.app.adapter.AddSocialFriendAdapter;
import com.app.adapter.ShowSocialFriends;
import com.app.util.GlobalUtills;
import com.app.util.NetworkCheck;
import com.app.util.TransparentProgressDialog;
import com.app.webserviceshandler.WebServiceHandler;

//------------------------------------------------------------------------------------------------------------------------------
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

//------------------------------------------------------------------------------------------------------------------------------
import org.apache.http.NameValuePair;  // TODO: remove deprecated type
import org.apache.http.message.BasicNameValuePair;  // TODO: remove deprecated type
import org.json.JSONObject;


//==============================================================================================================================
public class AddGroupActivity extends Activity implements OnItemSelectedListener
{

    //--Create Group Webservice ------------------------------------------------------------------------------------------------
    class CreateGroup extends AsyncTask<String, String, String>  // TODO: move this class out from external class if possible.
    {
        //----------------------------------------------------------------------------------------------------------------------
        // TransparentProgressDialog dialog;
        @Override
        protected String doInBackground(String... params)
        {
            try
            {
                // TODO: remove deprecated constructors and classes.
                ArrayList<NameValuePair> param = new ArrayList<NameValuePair>();

                param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE,       "post"));
                param.add(new BasicNameValuePair(GlobalConstant.U_TYPE,          "adgroup"));
                param.add(new BasicNameValuePair(GlobalConstant.GROUP_NAME,      groupName_));
                param.add(new BasicNameValuePair(GlobalConstant.GROUP_TYPE,      spinerText_));
                param.add(new BasicNameValuePair(GlobalConstant.USERID,          global_.getUser_id()));
                param.add(new BasicNameValuePair(GlobalConstant.GROUP_Users_ID,  appendedFriendIDs_));
                param.add(new BasicNameValuePair(GlobalConstant.SEARCH_KEYWOARD, searchKeyword_));
                param.add(new BasicNameValuePair(GlobalConstant.GROUP_IMAGE,     ""));

                param.add(new BasicNameValuePair("password", password_ + ""));
                param.add(new BasicNameValuePair("phones",   appendedPhoneNumbers_ + ""));

                Log.e("sending parameters", "" + param.toString());

                WebServiceHandler web = new WebServiceHandler();

                return web.makeServiceCall(GlobalConstant.URL, WebServiceHandler.GET, param);
            }
            catch(Exception exception)
            {
                exception.printStackTrace();

                System.out.println("Exception calling");

                return "";
            }
        }

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected void onPreExecute()
        {
            super.onPreExecute();

            buttonCreateGroup_.setVisibility(View.INVISIBLE);

            dialog_ = new TransparentProgressDialog(AddGroupActivity.this, R.drawable.loading_spinner_icon);

            dialog_.show();
        }

        //----------------------------------------------------------------------------------------------------------------------
        protected void onPostExecute(String result)  // TODO: must override?
        {
            super.onPostExecute(result);

            try
            {
                JSONObject jsonObject = new JSONObject(result);

                String msg = jsonObject.getString("Message");

                if (msg.equalsIgnoreCase("Success"))
                {
                    String groupId = jsonObject.getString("groupId");

                    if (imageBytesGroupIcon_.length() > 1)  // TODO: why 1 (magic number)
                        new groupImagesend().execute(groupId);

                    else
                    {
                        // TODO: regroup if possible.
                        // TODO: looks like copy/paste must be removed.
                        hashMapGetIDs_.clear();

                        global_.clearhashMAp();
                        global_.clearhashMAp_ph();

                        phoneNumber_.clear();
                        friendID_.clear();

                        AddSocialFriendAdapter.radio_checkCONtacts.clear();
                        ShowSocialFriends.radioCheckGroup().clear();
                        UsersAroundMe.radiosAroundMeChecked().clear();

                        appendedPhoneNumbers_ = "";
                        appendedFriendIDs_    = "";

                        // TODO: remove magic number
                        Toast.makeText(getApplicationContext(), "Group Created Successfully", 200).show();

                        buttonCreateGroup_.setVisibility(View.VISIBLE);

                        dialog_.dismiss();

                        friendID_.clear();
                        phoneNumber_.clear();

                        finish();
                    }
                }
                else  // TODO: this block must be first
                {
                    dialog_.dismiss();

                    buttonCreateGroup_.setVisibility(View.VISIBLE);

                    GlobalUtills.showToast("Oops..,Group not created !", AddGroupActivity.this);
                }

                friendID_.clear();  // TODO: these calls can be moved out of here.
                phoneNumber_.clear();
            }
            catch(Exception error)
            {
                if( dialog_.isShowing() )
                    dialog_.dismiss();

                // TODO: looks like copy/paste, must be removed.
                buttonCreateGroup_.setVisibility(View.VISIBLE);

                GlobalUtills.showToast("Oops..,Group not created !", AddGroupActivity.this);

                friendID_.clear();
                phoneNumber_.clear();

                error.printStackTrace();
            }
        }
    }

    //--send image--------------------------------------------------------------------------------------------------------------
    class groupImagesend extends AsyncTask<String , String , String>  // TODO: move this class out from external class if psbl.
    {

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected String doInBackground(String... params)
        {
            String GroupID = params[0];

            // TODO: remove deprecated constructors and classes
            ArrayList<NameValuePair> param = new ArrayList<NameValuePair>();

            param.add(new BasicNameValuePair("group_id", GroupID));
            param.add(new BasicNameValuePair("gimage", imageBytesGroupIcon_));

            try
            {
                WebServiceHandler web = new WebServiceHandler();

                // TODO: remove magic literals
                responseSendImage = web.makeServiceCall(GlobalConstant.URL + "?post_type=post&mtype=up_group",
                                                        WebServiceHandler.POST, param);
            }
            catch(Exception exception)
            {
                exception.printStackTrace();
                System.out.println("Exception calling");
            }

            return responseSendImage;
        }

        //----------------------------------------------------------------------------------------------------------------------
        @Override
        protected void onPreExecute()
        {
            super.onPreExecute();
        }

        //----------------------------------------------------------------------------------------------------------------------
        protected void onPostExecute(String result)  // TODO: must override?
        {
            // TODO: regroup if possible.
            hashMapGetIDs_.clear();

            global_.clearhashMAp();
            global_.clearhashMAp_ph();

            phoneNumber_.clear();
            friendID_.clear();

            AddSocialFriendAdapter.radio_checkCONtacts.clear();
            ShowSocialFriends.radioCheckGroup().clear();
            UsersAroundMe.radiosAroundMeChecked().clear();

            appendedPhoneNumbers_ = "";
            appendedFriendIDs_    = "";

            Toast.makeText(getApplicationContext(), "Group Created Successfully", 200).show();  // TODO: remove magic number

            buttonCreateGroup_.setVisibility(View.VISIBLE);

            dialog_.dismiss();

            finish();

            super.onPostExecute(result);
        }

        //----------------------------------------------------------------------------------------------------------------------
        private String responseSendImage;
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    public void onBackPressed()
    {
        global_.clearhashMAp();
        global_.clearhashMAp_ph();

        phoneNumber_.clear();
        friendID_.clear();

        AddSocialFriendAdapter.radio_checkCONtacts.clear();
        ShowSocialFriends.radioCheckGroup().clear();
        UsersAroundMe.radiosAroundMeChecked().clear();

        appendedPhoneNumbers_ = "";
        appendedFriendIDs_ = "";

        super.onBackPressed();
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id)
    {
        selectedTextView_.setText(state_[position]);

        spinerText_ = state_[position];

        System.out.println(spinerText_ + "spinner");

        if (spinerText_.equalsIgnoreCase("Public"))  // TODO: it's not good to keep strings and compare for them. Enums are pref
        {
            spinerText_ = "P";

            editGroupPswd_.setVisibility(View.GONE);
        }
        else if( spinerText_.equalsIgnoreCase("Private") )
        {
            spinerText_ = "PV";

            editGroupPswd_.setVisibility(View.VISIBLE);
        }
        else  // TODO: this block must be first.
            spinerText_ = "PV";

        System.out.println(spinerText_ + "spinner");
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    public void onNothingSelected(AdapterView<?> parent)
    {
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    protected void onSaveInstanceState(Bundle outState)
    {
        outState.putString("pic", imageBytesGroupIcon_);

        super.onSaveInstanceState(outState);
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState)
    {
        String pic = savedInstanceState.getString("pic");

        if (pic.length() > 1)
        {
            imageBytesGroupIcon_ = pic;
            imageEditProfile_.setImageBitmap(Facebook_ProfilePictureView_rounded.getRoundedBitmap(
                                             globalUtills_.StringToBitMap(imageBytesGroupIcon_)));
        }

        super.onRestoreInstanceState(savedInstanceState);
    }

    //--------------------------------------------------------------------------------------------------------------------------
    protected void onCreate(Bundle savedInstanceState)  // TODO: huge function, must be refactored. must override?
    {
        super.onCreate(savedInstanceState);

        // TODO: group where possible.
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);

        setContentView(R.layout.create_group);

        actionBarCommon_ = new ActionBarCommon(AddGroupActivity.this, null);

        gettingValues();

        global_ = new Global();

        publicSpinner_.setOnItemSelectedListener(this);

        actionBarCommon_.setActionText("Add Group");

        hashMapGetIDs_ = global_.getHashMap();

        imageBytesGroupIcon_ = "";

        ArrayAdapter<String> adapter_state = new ArrayAdapter<String>(this, android.R.layout.simple_dropdown_item_1line,
                                                                      state_);

        publicSpinner_.setAdapter(adapter_state);
        publicSpinner_.setOnItemSelectedListener(this);

        openSpiner_.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                publicSpinner_.performClick();
            }
        });

        actionBarCommon_.leftImage().setImageResource(R.drawable.icon_back_arrow);

        actionBarCommon_.layoutLeft().setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                global_.clearhashMAp();
                global_.clearhashMAp_ph();

                phoneNumber_.clear();
                friendID_.clear();
                AddSocialFriendAdapter.radio_checkCONtacts.clear();
                ShowSocialFriends.radioCheckGroup().clear();
                UsersAroundMe.radiosAroundMeChecked().clear();

                appendedPhoneNumbers_ = "";
                appendedFriendIDs_    = "";

                finish();
            }
        });

        buttonCreateGroup_.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                if (!NetworkCheck.getConnectivityStatusString(AddGroupActivity.this).equalsIgnoreCase("true"))
                    NetworkCheck.openInternetDialog(AddGroupActivity.this);

                else
                {
                    for(int index = 0; index < friendID_.size(); ++index)
                    {
                        if (index == friendID_.size())
                            appendedFriendIDs_ = appendedFriendIDs_ + friendID_.get(index);

                        else
                            appendedFriendIDs_ = appendedFriendIDs_ + friendID_.get(index) + ",";
                    }

                    for (int index = 0; index < phoneNumber_.size(); ++index)
                    {
                        if (index == phoneNumber_.size())
                            appendedPhoneNumbers_ = appendedPhoneNumbers_ + phoneNumber_.get(index).replaceAll(" ", "").trim();

                        else
                            appendedPhoneNumbers_ = appendedPhoneNumbers_ + phoneNumber_.get(index).replaceAll(" ", "").trim() +
                                                    ",";
                    }

                    groupName_     = editGroupName_.getText().toString().trim();
                    searchKeyword_ = editSearchKeywoards_.getText().toString().trim();

                    // TODO: this if/else blocks must be refactored. It can be shorter.
                    if (groupName_.length() == 0)
                    {
                        if (toast_ != null)
                            toast_.cancel();

                        editGroupName_.requestFocus();

                        toast_ = Toast.makeText(AddGroupActivity.this, "Please enter the Group Name", 200);  // TODO: magic numb

                        toast_.show();
                    }
                    else if (searchKeyword_.length() == 0)
                    {
                        if( toast_ != null )
                            toast_.cancel();

                        editSearchKeywoards_.requestFocus();

                        toast_ = Toast.makeText(AddGroupActivity.this, "Please enter the search keyword", 200);  // TODO: magic

                        toast_.show();
                    }
                    else if (spinerText_.length() == 0)
                    {
                        if( toast_ != null )
                            toast_.cancel();

                        openSpiner_.requestFocus();

                        toast_ = Toast.makeText(AddGroupActivity.this, "Please Select the Group Type", 200);  // TODO: magic

                        toast_.show();
                    }
                    else if (appendedFriendIDs_.trim().equals(""))
                    {
                        if( toast_ != null )
                            toast_.cancel();

                        // TODO: remove magic number
                        toast_ = Toast.makeText(AddGroupActivity.this, "Please add atleast one friend from facebook", 200);

                        toast_.show();
                    }
                    else if (spinerText_.equals("PV"))
                    {
                        if (editGroupPswd_.getText().toString().trim().equals(""))
                        {
                            editGroupPswd_.requestFocus();
                            editGroupPswd_.setHint("Please enter a Password..");
                            editGroupPswd_.setHintTextColor(Color.RED);
                        }
                        else
                        {
                            if (spinerText_.equals("PV"))  // TODO: it equals.
                                password_ = editGroupPswd_.getText().toString().trim();

                            new CreateGroup().execute();
                        }
                    }
                    else
                    {
                        if (spinerText_.equals("PV"))  // TODO: it not equals.
                            password_ = editGroupPswd_.getText().toString().trim();

                        new CreateGroup().execute();
                    }
                }
            }
        });

        imageEditProfile_.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                chooseDialog();
            }
        });

        InputFilter[] filters = new InputFilter[1];

        filters[0] = new InputFilter()
        {
            @Override
            public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)
            {
                if (end > start)
                {
                    char[] acceptedChars = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                                                       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',
                                                       'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                                                       'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3',
                                                       '4', '5', '6', '7', '8', '9', '@', '.', '_', '#', '$', '%', '&', '*',
                                                       '-', '+', '(', ')', '!', '"', ':', ';', '/', '?', ',', '~', '`', '|',
                                                       '^', '<', '>', '{', '}', '[', ']', '=', '.', '\'', '\\'};

                    for (int index = start; index < end; ++index)
                        // TODO: for what new string is creating every time.
                        if (!new String(acceptedChars).contains(String.valueOf(source.charAt(index))))
                            return "";
                }

                return null;
            }
        };

        editGroupPswd_.setFilters(filters);
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    protected void onResume()
    {
        super.onResume();

        global_            = new Global();
        globalUtills_      = new GlobalUtills();
        hashMapGetIDs_     = global_.getHashMap();
        appendedFriendIDs_ = "";

        layoutAddedFriends_.setVisibility(View.GONE);

        getSelectedfriends();

        SharedPreferences sharedPref = getSharedPreferences("login", MODE_PRIVATE);  // TODO: for what var is needed. It used
                                                                                     //       only once.
        global_.setUser_id(sharedPref.getString("UserID", ""));

        if (imageBytesGroupIcon_.length() > 1)
            imageEditProfile_.setImageBitmap(
                Facebook_ProfilePictureView_rounded.getRoundedBitmap(globalUtills_.StringToBitMap(imageBytesGroupIcon_)));
    }

    //--------------------------------------------------------------------------------------------------------------------------
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        switch (requestCode)
        {
        case 22:  // TODO: remove magic number
            if (resultCode == Activity.RESULT_OK)  // TODO: it seems like double compare
            {
                try
                {
                    File             tempFile     = getTemporaryFile();
                    String           tempFileName = Environment.getExternalStorageDirectory() + "/" + TEMP_PHOTO_FILE;
                    InputStream      inputStream  = getContentResolver().openInputStream(data.getData());
                    FileOutputStream outputStream = new FileOutputStream(tempFileName);

                    globalUtills_.copyStream(inputStream, outputStream);

                    outputStream.close();
                    inputStream.close();

                    decodeFile(tempFileName);

                    if (tempFile.exists())
                        tempFile.delete();
                }
                catch(Exception error)
                {
                    error.printStackTrace();
                }
            }

            break;

        case 1888:
            try
            {
                String filePath = null;
                File tempFile = getTemporaryFile();

                filePath = Environment.getExternalStorageDirectory() + "/" + TEMP_PHOTO_FILE;  // TODO: no delayed init is need.

                if (filePath != null)  // TODO: it can't be null
                    decodeFile(filePath);

                if (tempFile.exists())
                    tempFile.delete();
            }
            catch(RuntimeException error)
            {
                error.printStackTrace();
            }
            catch(Exception error)
            {
                error.printStackTrace();
            }

            break;
        }

        super.onActivityResult(requestCode, resultCode, data);
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private void gettingValues()
    {
        actionBarCommon_     = (ActionBarCommon) findViewById(R.id.action_bar);
        addFriend_           = (TextView)        findViewById(R.id.text_view_addFriends);
        selectedTextView_    = (TextView)        findViewById(R.id.text_View_group_selection);
        buttonCreateGroup_   = (TextView)        findViewById(R.id.btn_create_group);
        openSpiner_          = (ImageView)       findViewById(R.id.img_drop_down_group);
        imageEditProfile_    = (ImageView)       findViewById(R.id.imgV_edit_profile);
        editGroupName_       = (EditText)        findViewById(R.id.edit_group_name);
        editGroupPswd_       = (EditText)        findViewById(R.id.edGroupPswd);
        editSearchKeywoards_ = (EditText)        findViewById(R.id.edit_txt_EnterKeyWords);
        publicSpinner_       = (Spinner)         findViewById(R.id.private_public_spinner);
        layoutAddedFriends_  = (LinearLayout)    findViewById(R.id.layout_added_friends);

        addFriend_.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                // TODO: declared at func begin and used at func end.
                Intent intent = new Intent(AddGroupActivity.this, FriendsTabBar.class);

                appendedFriendIDs_    = "";
                appendedPhoneNumbers_ = "";

                Log.e("Size inResuume", "" + hashMapGetIDs_.size());

                startActivity(intent);
            }
        });
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private void getSelectedfriends()
    {
        friendID_.clear();
        phoneNumber_.clear();

        appendedPhoneNumbers_ = "";
        appendedFriendIDs_    = "";

        // around me
        if (UsersAroundMe.usersAroundMe().size() > 0 && UsersAroundMe.radiosAroundMeChecked().size() > 0)
            for (int index = 0; index < UsersAroundMe.usersAroundMe().size(); ++index)
                if (UsersAroundMe.radiosAroundMeChecked().get(index))
                    friendID_.add(UsersAroundMe.usersAroundMe().get(index).getId());

        // show social
        if (ShowingSocialsFreinds.allFriendList().size() > 0 && AddSocialFriendAdapter.radio_checkCONtacts.size() > 0)
            for(int index = 0; index < ShowingSocialsFreinds.allFriendList().size(); ++index)
                if (AddSocialFriendAdapter.radio_checkCONtacts.get(index))
                {
                    if (ShowingSocialsFreinds.allFriendList().get(index).getId().equals(""))
                        phoneNumber_.add(ShowingSocialsFreinds.allFriendList().get(index).getMobile_no());

                    else
                        friendID_.add(ShowingSocialsFreinds.allFriendList().get(index).getId());
                }

        // group mates
        try
        {
            if (GroupMates.usersList().size() > 0 && ShowSocialFriends.radioCheckGroup().size() > 0)
                for (int index = 0; index < GroupMates.usersList().size(); ++index)
                    if (ShowSocialFriends.radioCheckGroup().get(index))
                        friendID_.add(GroupMates.usersList().get(index).getId());
        }
        catch(Exception error)
        {
        }

        HashSet<String> hashSet = new HashSet<String>();

        hashSet.addAll(friendID_);

        friendID_.clear();
        friendID_.addAll(hashSet);

        HashSet<String> hashSetPhones = new HashSet<String>();

        hashSetPhones.addAll(phoneNumber_);

        phoneNumber_.clear();
        phoneNumber_.addAll(hashSetPhones);

        if (friendID_.size() > 0)
            showAddedFriends();
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private void chooseDialog()
    {
        final Dialog dialogLoader = new Dialog(this, R.style.Theme_Dialog);

        dialogLoader.setTitle      ("Select a Image ");
        dialogLoader.setContentView(R.layout.dialogo_choose);

        dialogLoader.getWindow().setLayout(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);

        ImageButton buttonTakeGallery = (ImageButton) dialogLoader.findViewById(R.id.uiC_imgbtntake_gallery);
        ImageButton buttonTakeCamera  = (ImageButton) dialogLoader.findViewById(R.id.uiC_imgbtntake_camera);
        ImageButton buttonYoutube     = (ImageButton) dialogLoader.findViewById(R.id.btn_youTube);

        buttonYoutube.setVisibility(View.GONE);

        buttonTakeGallery.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View view)
            {
                dialogLoader.dismiss();

                Intent pickPhoto = new Intent(Intent.ACTION_PICK);

                pickPhoto.setType("image/*");

                startActivityForResult(pickPhoto, 22);  // TODO: remove magic number
            }
        });

        buttonTakeCamera.setOnClickListener(new OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                dialogLoader.dismiss();

                Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);

                cameraIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, getTemporaryUri());
                cameraIntent.putExtra("return-data", true);

                startActivityForResult(cameraIntent, 1888);  // TODO: remove magic number
            }
        });

        dialogLoader.show();
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private Uri getTemporaryUri()
    {
        return Uri.fromFile(getTemporaryFile());
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private File getTemporaryFile()
    {
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))  // TODO: swap if and else
        {
            File file = new File(Environment.getExternalStorageDirectory(), TEMP_PHOTO_FILE);

            try
            {
                file.createNewFile();
            }
            catch(IOException error)
            {
            }

            return file;  // TODO: invalid file may be returned.
        }
        else
        {
            return null;
        }
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private void decodeFile(String filePath)
    {
        // Decode image size
        BitmapFactory.Options option = new BitmapFactory.Options();

        option.inJustDecodeBounds = true;

        BitmapFactory.decodeFile(filePath, option);

        // Find the correct scale value. It should be the power of 2.
        int temporaryWidth  = option.outWidth;
        int temporaryHeight = option.outHeight;
        int scale           = 1;

        while (true)  // TODO: it can be done without cycle.
        {
            // The new size we want to scale to
            final int REQUIRED_SIZE = 1024;

            if(temporaryWidth < REQUIRED_SIZE && temporaryHeight < REQUIRED_SIZE)
                break;

            temporaryWidth  /= 2;
            temporaryHeight /= 2;
            scale           *= 2;
        }

        // Decode with inSampleSize
        BitmapFactory.Options option2 = new BitmapFactory.Options();  // TODO: give appropriate name to this var.

        option2.inSampleSize = scale;

        Bitmap bitmap = BitmapFactory.decodeFile(filePath, option2);

        try
        {
            ExifInterface exifInterface = new ExifInterface(filePath);
            int           orientation   = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                                                                        ExifInterface.ORIENTATION_NORMAL);
            Matrix        matrix        = new Matrix();

            switch (orientation)  // TODO: it can be done shorter.
            {
            case ExifInterface.ORIENTATION_ROTATE_90:
                matrix.postRotate(90);
                bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                break;

            case ExifInterface.ORIENTATION_ROTATE_180:
                matrix.postRotate(180);
                bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                break;

            case ExifInterface.ORIENTATION_ROTATE_270:
                matrix.postRotate(270);
                bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                break;

            default:
                bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
                break;
            }
        }
        catch(Throwable error)
        {
            error.printStackTrace();
        }

        System.out.println(filePath.toString() + "filepath is");  // TODO: it seems like they must be swaped.

        ByteArrayOutputStream outStream = new ByteArrayOutputStream();

        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, outStream);

        imageEditProfile_.setImageBitmap(Facebook_ProfilePictureView_rounded.getRoundedBitmap(bitmap));

        imageBytesGroupIcon_ = globalUtills_.BitMapToString(bitmap);
    }

    //--------------------------------------------------------------------------------------------------------------------------
    private void showAddedFriends()
    {
        layoutAddedFriends_.setVisibility (View.VISIBLE);
        layoutAddedFriends_.removeAllViews();

        TextView title = new TextView(getApplicationContext());

        title.setTextColor(Color.BLACK);
        title.setText     ("Selected fb friends (" + friendID_.size() + ") :");

        layoutAddedFriends_.addView(title);

        for(int index = 0; index < friendID_.size(); ++index)
        {
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,
                                                                                   LayoutParams.WRAP_CONTENT);

            layoutParams.gravity = Gravity.CENTER_HORIZONTAL;

            Facebook_ProfilePictureView_rounded addedFriends = new Facebook_ProfilePictureView_rounded(getApplicationContext());

            addedFriends.setLayoutParams(layoutParams);
            addedFriends.setProfileId   (friendID_.get(index));

            layoutAddedFriends_.addView(addedFriends);
        }

        if(phoneNumber_.size() > 0)  // TODO: looks like copy/paste. Check it for refactoring.
        {
            TextView title2 = new TextView(getApplicationContext());  // TODO: give appropriate name to this var.

            title2.setTextColor(Color.BLACK);
            title2.setText     ("Selected phone contacts (" + phoneNumber_.size() + ") :");

            layoutAddedFriends_.addView(title2);

            for(int index = 0; index < phoneNumber_.size(); ++index)
            {
                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,
                                                                                       LayoutParams.WRAP_CONTENT);

                layoutParams.gravity = Gravity.CENTER_HORIZONTAL;

                TextView name = new TextView(getApplicationContext());

                name.setTextColor   (Color.parseColor("#fc6278"));
                name.setText        (phoneNumber_.get(index) + "");  // TODO: for what empty string is needed?
                name.setLayoutParams(layoutParams);

                layoutAddedFriends_.addView(name);
            }
        }
    }

    //--------------------------------------------------------------------------------------------------------------------------
    public static final String TEMP_PHOTO_FILE = "temporary_GroupIMG.jpg";

    //--------------------------------------------------------------------------------------------------------------------------
    private static LinearLayout             layoutAddedFriends_;
    private static ImageView                imageEditProfile_;
    private static String                   imageBytesGroupIcon_ = "";
    private static HashMap<Integer, String> hashMapGetIDs_       = new HashMap<Integer, String>();

    //--------------------------------------------------------------------------------------------------------------------------
    // TODO: give appropriate names to variables
    private ActionBarCommon           actionBarCommon_;
    private TextView                  addFriend_;
    private TextView                  buttonCreateGroup_;
    private TextView                  selectedTextView_;
    private Spinner                   publicSpinner_;
    private ImageView                 openSpiner_;
    private EditText                  editGroupName_;
    private EditText                  editSearchKeywoards_;
    private EditText                  editGroupPswd_;
    private Global                    global_;
    private GlobalUtills              globalUtills_;
    private String                    searchKeyword_;
    private String                    groupName_;
    private String                    password_             = "";
    private String                    spinerText_           = "P";
    private String                    appendedFriendIDs_    = "";
    private String                    appendedPhoneNumbers_ = "";
    private String[]                  state_                = { "Public", "Private" };
    private ArrayList<String>         friendID_             = new ArrayList<String>();
    private ArrayList<String>         phoneNumber_          = new ArrayList<String>();
    private Toast                     toast_;
    private TransparentProgressDialog dialog_;
}
