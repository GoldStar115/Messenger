package com.app.messenger;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.app.ActionBar.LayoutParams;
import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.text.InputFilter;
import android.text.Spanned;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.app.adapter.AddSocialFriendAdapter;
import com.app.adapter.ShowSocialFriends;
import com.app.util.GlobalUtills;
import com.app.util.NetworkCheck;
import com.app.util.TransparentProgressDialog;
import com.app.webserviceshandler.WebServiceHandler;

public class AddGroupActivity extends Activity implements OnItemSelectedListener
{
	ActionBarCommon						actionBarCommon;

	TextView							add_friend, btn_create_group, selectedTextView;
	Spinner								publicSpinner;
	ImageView							open_spiner;
	EditText							GroupName, ed_Search_Keywoards, edGroupPswd;
	// ImageView group_profilepic;
	static HashMap<Integer , String>	hashMap_getids		= new HashMap<Integer , String>();
	static HashMap<Integer , String>	hashMap_getids_ph	= new HashMap<Integer , String>();
	int									requestforFriendIds	= 1;
	Global								global;
	int									i					= 0;
	String								str_EncodedImage	= "empty", spiner_txt = "P", search_keywoard, group_name, appended_friend_ids = "", appended_phone_no = "";
	private String[]					state_pb_private	= { "Public", "Private" };

	ArrayList<String>					friend_id			= new ArrayList<String>();
	ArrayList<String>					phone_no			= new ArrayList<String>();

	String								GPswd				= "";

	Toast								toast;

	static LinearLayout					layout_addedfriends;
	TransparentProgressDialog			dialog;

	static String						imgbytesGroupIcon	= "";
	static ImageView					imgVeditprofile;
	static boolean						imgORnot			= false;

	GlobalUtills						globalUtills;

	@Override
	public void onBackPressed()
	{
		global.clearhashMAp();
		global.clearhashMAp_ph();
		phone_no.clear();
		friend_id.clear();

		AddSocialFriendAdapter.radio_checkCONtacts.clear();
		ShowSocialFriends.radio_checkGroup.clear();
		Aroundme_users.radio_checkAroundME.clear();

		appended_phone_no = "";
		appended_friend_ids = "";

		super.onBackPressed();
	}

	@Override
	protected void onSaveInstanceState(Bundle outState)
	{

		outState.putString("pic", imgbytesGroupIcon);

		super.onSaveInstanceState(outState);
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState)
	{

		String pic = savedInstanceState.getString("pic");

		if( pic.length() > 1 )
		{
			imgbytesGroupIcon = pic;
			imgVeditprofile.setImageBitmap(Facebook_ProfilePictureView_rounded.getRoundedBitmap(globalUtills.StringToBitMap(imgbytesGroupIcon)));
		}

		super.onRestoreInstanceState(savedInstanceState);
	}

	protected void onCreate(Bundle savedInstanceState)
	{
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
		setContentView(R.layout.create_group);
		actionBarCommon = new ActionBarCommon(AddGroupActivity.this, null);
		gettingValues();

		global = new Global();
		publicSpinner.setOnItemSelectedListener(this);
		actionBarCommon.setActionText("Add Group");
		hashMap_getids = global.getHashMap();
		// group_profilepic.setVisibility(View.GONE);
		imgbytesGroupIcon = "";
		ArrayAdapter<String> adapter_state = new ArrayAdapter<String>(this, android.R.layout.simple_dropdown_item_1line, state_pb_private);

		publicSpinner.setAdapter(adapter_state);
		publicSpinner.setOnItemSelectedListener(this);

		open_spiner.setOnClickListener(new OnClickListener()
		{

			@Override
			public void onClick(View v)
			{

				publicSpinner.performClick();

			}
		});
		actionBarCommon.left_image.setImageResource(R.drawable.icon_back_arrow);
		actionBarCommon.layout_left.setOnClickListener(new OnClickListener()
		{

			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				global.clearhashMAp();
				global.clearhashMAp_ph();
				phone_no.clear();
				friend_id.clear();

				AddSocialFriendAdapter.radio_checkCONtacts.clear();
				ShowSocialFriends.radio_checkGroup.clear();
				Aroundme_users.radio_checkAroundME.clear();

				appended_phone_no = "";
				appended_friend_ids = "";

				finish();
			}
		});

		btn_create_group.setOnClickListener(new OnClickListener()
		{

			@Override
			public void onClick(View v)
			{

				if( !NetworkCheck.getConnectivityStatusString(AddGroupActivity.this).equalsIgnoreCase("true") )
				{
					NetworkCheck.openInternetDialog(AddGroupActivity.this);
				}
				else
				{

					for( int i = 0; i < friend_id.size(); i++ )
					{

						if( i == friend_id.size() )
						{
							appended_friend_ids = appended_friend_ids + friend_id.get(i);
						}
						else
						{
							appended_friend_ids = appended_friend_ids + friend_id.get(i) + ",";
						}

					}

					for( int i = 0; i < phone_no.size(); i++ )
					{

						if( i == phone_no.size() )
						{
							appended_phone_no = appended_phone_no + phone_no.get(i).replaceAll(" ", "").trim();
						}
						else
						{
							appended_phone_no = appended_phone_no + phone_no.get(i).replaceAll(" ", "").trim() + ",";
						}
					}

					group_name = GroupName.getText().toString().trim();
					search_keywoard = ed_Search_Keywoards.getText().toString().trim();
					/*
					 * if (str_EncodedImage.equals("empty")) {
					 * Toast.makeText(getApplicationContext(),
					 * "Please Select Image", 200).show(); }
					 */if( group_name.length() == 0 )
					{

						if( toast != null )
						{
							toast.cancel();
						}
						GroupName.requestFocus();
						toast = Toast.makeText(AddGroupActivity.this, "Please enter the Group Name", 200);
						toast.show();
					}
					else if( search_keywoard.length() == 0 )
					{
						if( toast != null )
						{
							toast.cancel();
						}
						ed_Search_Keywoards.requestFocus();
						toast = Toast.makeText(AddGroupActivity.this, "Please enter the search keyword", 200);
						toast.show();

					}

					else if( spiner_txt.length() == 0 )
					{
						if( toast != null )
						{
							toast.cancel();
						}
						open_spiner.requestFocus();
						toast = Toast.makeText(AddGroupActivity.this, "Please Select the Group Type", 200);
						toast.show();

					}
					else if( appended_friend_ids.trim().equals("") )
					{
						// && appended_phone_no.trim().equals("")) {
						if( toast != null )
						{
							toast.cancel();
						}

						toast = Toast.makeText(AddGroupActivity.this, "Please add atleast one friend from facebook", 200);
						toast.show();
					}
					/*
					 * else if (imgbytesGroupIcon.equals("")) {
					 * GlobalUtills.showToast("Please select an Group image",
					 * AddGroupActivity.this); }
					 */

					else if( spiner_txt.equals("PV") )
					{
						if( edGroupPswd.getText().toString().trim().equals("") )
						{
							edGroupPswd.requestFocus();
							edGroupPswd.setHint("Please enter a Password..");
							edGroupPswd.setHintTextColor(Color.RED);
						}
						else
						{
							if( spiner_txt.equals("PV") )
							{
								GPswd = edGroupPswd.getText().toString().trim();
							}

							new CreateGroup().execute();
						}

					}

					else
					{
						if( spiner_txt.equals("PV") )
						{
							GPswd = edGroupPswd.getText().toString().trim();
						}

						new CreateGroup().execute();

					}
				}
			}
		});

		imgVeditprofile.setOnClickListener(new OnClickListener()
		{

			@Override
			public void onClick(View v)
			{

				DialogoChoose();

			}
		});

		InputFilter[] filters = new InputFilter[1];
		filters[0] = new InputFilter()
		{
			@Override
			public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend)
			{
				if( end > start )
				{

					char[] acceptedChars = new char[ ] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',
							'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
							'@', '.', '_', '#', '$', '%', '&', '*', '-', '+', '(', ')', '!', '"', '\'', ':', ';', '/', '?', ',', '~', '`', '|', '\\', '^', '<', '>', '{', '}', '[', ']', '=', '.' };

					for( int index = start; index < end; index++ )
					{
						if( !new String(acceptedChars).contains(String.valueOf(source.charAt(index))) )
						{
							return "";
						}
					}
				}
				return null;
			}

		};
		edGroupPswd.setFilters(filters);

	}

	public void gettingValues()
	{
		actionBarCommon = (ActionBarCommon) findViewById(R.id.action_bar);
		add_friend = (TextView) findViewById(R.id.text_view_addFriends);
		open_spiner = (ImageView) findViewById(R.id.img_drop_down_group);
		GroupName = (EditText) findViewById(R.id.edit_group_name);
		// group_profilepic = (ImageView) findViewById(R.id.group_image);
		selectedTextView = (TextView) findViewById(R.id.text_View_group_selection);
		publicSpinner = (Spinner) findViewById(R.id.private_public_spinner);
		btn_create_group = (TextView) findViewById(R.id.btn_create_group);
		ed_Search_Keywoards = (EditText) findViewById(R.id.edit_txt_EnterKeyWords);
		layout_addedfriends = (LinearLayout) findViewById(R.id.layout_added_friends);
		imgVeditprofile = (ImageView) findViewById(R.id.imgV_edit_profile);
		edGroupPswd = (EditText) findViewById(R.id.edGroupPswd);

		// --------------------------Add Friend ------------------------

		add_friend.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				Intent intent = new Intent(AddGroupActivity.this, FriendsTabBar.class);

				appended_friend_ids = "";
				appended_phone_no = "";

				// if (hashMap_getids.size() > 0) {
				// hashMap_getids.clear();
				// global.setHashMap(hashMap_getids);
				// appended_friend_ids = "";
				// global.hashMap_idsGroupmates.clear();
				// phone_no = new String[0];
				// friend_id.clear();
				// hashMap_getids_ph.clear();
				// global.hashMap_ids_ph.clear();
				// global.hashMap_idsaroundme.clear();
				// appended_phone_no = "";
				// }

				// if (hashMap_getids_ph.size() > 0) {
				// hashMap_getids_ph.clear();
				// global.setHashMap(hashMap_getids_ph);
				// appended_phone_no = "";
				// phone_no = new String[0];
				// }

				Log.e("Size inResuume", "" + hashMap_getids.size());
				startActivity(intent);

			}
		});

	}

	@Override
	public void onItemSelected(AdapterView<?> parent, View view, int position, long id)
	{

		selectedTextView.setText(state_pb_private[position]);
		spiner_txt = state_pb_private[position];

		System.out.println(spiner_txt + "spinner");
		// "Public", "Private", "Premium"
		if( spiner_txt.equalsIgnoreCase("Public") )
		{
			spiner_txt = "P";
			edGroupPswd.setVisibility(View.GONE);
		}
		else if( spiner_txt.equalsIgnoreCase("Private") )
		{
			spiner_txt = "PV";
			edGroupPswd.setVisibility(View.VISIBLE);
		}
		else
		{
			spiner_txt = "PV";
		}

		System.out.println(spiner_txt + "spinner");

	}

	@Override
	public void onNothingSelected(AdapterView<?> parent)
	{
	}

	// -----------------------Create Group Webservice --------------------------

	class CreateGroup extends AsyncTask<String , String , String>
	{
		// TransparentProgressDialog dialog;

		@Override
		protected String doInBackground(String... params)
		{

			String creat_groupResponse = "";
			try
			{

				ArrayList<NameValuePair> param = new ArrayList<NameValuePair>();

				param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE, "post"));
				param.add(new BasicNameValuePair(GlobalConstant.U_TYPE, "adgroup"));
				param.add(new BasicNameValuePair(GlobalConstant.GROUP_NAME, group_name));

				param.add(new BasicNameValuePair(GlobalConstant.GROUP_TYPE, spiner_txt));
				param.add(new BasicNameValuePair(GlobalConstant.USERID, global.getUser_id()));

				param.add(new BasicNameValuePair(GlobalConstant.GROUP_Users_ID, appended_friend_ids));

				param.add(new BasicNameValuePair(GlobalConstant.SEARCH_KEYWOARD, search_keywoard));

				param.add(new BasicNameValuePair(GlobalConstant.GROUP_IMAGE, ""));

				param.add(new BasicNameValuePair("password", GPswd + ""));
				param.add(new BasicNameValuePair("phones", appended_phone_no + ""));

				Log.e("sending parameters", "" + param.toString());

				WebServiceHandler web = new WebServiceHandler();

				creat_groupResponse = web.makeServiceCall(GlobalConstant.URL, WebServiceHandler.GET, param);

			}
			catch(Exception exception)
			{

				exception.printStackTrace();
				System.out.println("Exception calling");
			}

			return creat_groupResponse;

		}

		@Override
		protected void onPreExecute()
		{
			super.onPreExecute();

			btn_create_group.setVisibility(View.INVISIBLE);

			dialog = new TransparentProgressDialog(AddGroupActivity.this, R.drawable.loading_spinner_icon);
			dialog.show();

		}

		protected void onPostExecute(String result)
		{

			super.onPostExecute(result);

			try
			{

				JSONObject jobj = new JSONObject(result);

				String msg = jobj.getString("Message");

				if( msg.equalsIgnoreCase("Success") )
				{

					String groupId = jobj.getString("groupId");

					if( imgbytesGroupIcon.length() > 1 )
					{
						new groupImagesend().execute(groupId);
					}
					else
					{

						hashMap_getids.clear();

						global.clearhashMAp();
						global.clearhashMAp_ph();
						phone_no.clear();
						friend_id.clear();

						AddSocialFriendAdapter.radio_checkCONtacts.clear();
						ShowSocialFriends.radio_checkGroup.clear();
						Aroundme_users.radio_checkAroundME.clear();

						appended_phone_no = "";
						appended_friend_ids = "";

						Toast.makeText(getApplicationContext(), "Group Created Successfully", 200).show();

						btn_create_group.setVisibility(View.VISIBLE);

						dialog.dismiss();

						friend_id.clear();
						phone_no.clear();

						finish();
					}

				}
				else
				{
					dialog.dismiss();
					btn_create_group.setVisibility(View.VISIBLE);
					GlobalUtills.showToast("Oops..,Group not created !", AddGroupActivity.this);
				}

				friend_id.clear();
				phone_no.clear();
			}
			catch(Exception e)
			{
				if( dialog.isShowing() )
				{
					dialog.dismiss();
				}
				btn_create_group.setVisibility(View.VISIBLE);
				GlobalUtills.showToast("Oops..,Group not created !", AddGroupActivity.this);

				friend_id.clear();
				phone_no.clear();
				e.printStackTrace();
			}

		}

	}

	@Override
	public void onConfigurationChanged(Configuration newConfig)
	{
		// TODO Auto-generated method stub
		super.onConfigurationChanged(newConfig);
		/**/
	}

	@Override
	protected void onResume()
	{
		// TODO Auto-generated method stub
		super.onResume();
		global = new Global();

		globalUtills = new GlobalUtills();

		hashMap_getids = global.getHashMap();
		int k = 0;
		layout_addedfriends.setVisibility(View.GONE);
		appended_friend_ids = "";

		// if (hashMap_getids.size() > 0) {
		//
		//
		// phone_no = new String[hashMap_getids_ph.size()];
		// friend_id = new ArrayList<String>();
		//
		//
		// Set<Integer> keys = hashMap_getids.keySet();
		// for (Integer key : keys) {
		// Log.e("value of key", "" + key);
		// if (!friend_id.contains(hashMap_getids.get(key))) {
		// friend_id.add(hashMap_getids.get(key));
		// }
		//
		// k++;
		// }
		// Log.e("friend ids", friend_id.toString());
		// StringBuilder builder;
		//
		//
		//
		// for (int i = 0; i < friend_id.size(); i++) {
		// builder = new StringBuilder();
		//
		// if (i == friend_id.size()) {
		// appended_friend_ids = appended_friend_ids
		// + builder.append(friend_id.get(i));
		// } else {
		// appended_friend_ids = appended_friend_ids
		// + builder.append(friend_id.get(i)).append(",");
		// }
		//
		// }
		//
		//
		// appended_friend_ids=appended_friend_ids.substring(0,
		// appended_friend_ids.length()-1);
		// Log.e("appended string", "" + appended_friend_ids);
		// // hashMap_getids.clear();
		//
		//
		// // for phone no
		// hashMap_getids_ph = global.getHashMap_ph();
		// int g = 0;
		// if (hashMap_getids_ph.size() > 0) {
		// phone_no = new String[hashMap_getids_ph.size()];
		// Set<Integer> keysP = hashMap_getids_ph.keySet();
		// for (Integer key : keysP) {
		// Log.e("value of key", "" + key);
		// phone_no[g] = hashMap_getids_ph.get(key);
		// g++;
		// }
		// Log.e("friend ids", phone_no.toString());
		// StringBuilder builderP;
		//
		// for (int i = 0; i < phone_no.length; i++) {
		// builderP = new StringBuilder();
		//
		// if (i == phone_no.length) {
		// appended_phone_no = appended_phone_no
		// + builderP.append(phone_no[i].replaceAll(" ", "")
		// .trim());
		// } else {
		// appended_phone_no = appended_phone_no
		// + builderP.append(
		// phone_no[i].replaceAll(" ", "").trim())
		// .append(",");
		// }
		//
		// }
		//
		// appended_phone_no=appended_phone_no.substring(0,
		// appended_phone_no.length()-1);
		// Log.e("appended_phone_no string", "" + appended_phone_no);
		// // hashMap_getids_ph.clear();
		//
		// }
		//
		//
		//
		//
		// }
		getSelectedfrnds();

		SharedPreferences sharedPref = getSharedPreferences("login", MODE_PRIVATE);
		global.setUser_id(sharedPref.getString("UserID", ""));

		if( imgbytesGroupIcon.length() > 1 )
		{
			// imgVeditprofile=(ImageView)findViewById(R.id.imgV_edit_profile);
			imgVeditprofile.setImageBitmap(Facebook_ProfilePictureView_rounded.getRoundedBitmap(globalUtills.StringToBitMap(imgbytesGroupIcon)));
		}

	}

	private void getSelectedfrnds()
	{

		friend_id.clear();
		phone_no.clear();
		appended_phone_no = "";
		appended_friend_ids = "";

		// around me
		if( Aroundme_users.list_of_around_users.size() > 0 && Aroundme_users.radio_checkAroundME.size() > 0 )
		{
			for( int i = 0; i < Aroundme_users.list_of_around_users.size(); i++ )
			{
				if( Aroundme_users.radio_checkAroundME.get(i) )
				{
					friend_id.add(Aroundme_users.list_of_around_users.get(i).getId());
				}
			}
		}

		// show social
		if( ShowingSocialsFreinds.list_of_allfriend.size() > 0 && AddSocialFriendAdapter.radio_checkCONtacts.size() > 0 )
		{
			for( int i = 0; i < ShowingSocialsFreinds.list_of_allfriend.size(); i++ )
			{
				if( AddSocialFriendAdapter.radio_checkCONtacts.get(i) )
				{

					if( ShowingSocialsFreinds.list_of_allfriend.get(i).getId().equals("") )
					{
						phone_no.add(ShowingSocialsFreinds.list_of_allfriend.get(i).getMobile_no());

					}
					else
					{
						friend_id.add(ShowingSocialsFreinds.list_of_allfriend.get(i).getId());
					}

				}

			}
		}

		// group mates
		try
		{

			if( GroupMates.list_of_users.size() > 0 && ShowSocialFriends.radio_checkGroup.size() > 0 )
			{
				for( int i = 0; i < GroupMates.list_of_users.size(); i++ )
				{
					if( ShowSocialFriends.radio_checkGroup.get(i) )
					{
						friend_id.add(GroupMates.list_of_users.get(i).getId());
					}

				}
			}

		}
		catch(Exception e)
		{

		}

		HashSet<String> hashSet = new HashSet<String>();
		hashSet.addAll(friend_id);
		friend_id.clear();
		friend_id.addAll(hashSet);

		HashSet<String> hashSet_ph = new HashSet<String>();
		hashSet_ph.addAll(phone_no);
		phone_no.clear();
		phone_no.addAll(hashSet_ph);

		if( friend_id.size() > 0 )
		{
			show_added_friends();
		}

	}

	// image all stuff

	public void DialogoChoose()
	{
		final Dialog dialogLoader = new Dialog(this, R.style.Theme_Dialog);
		dialogLoader.setTitle("Select a Image ");
		dialogLoader.setContentView(R.layout.dialogo_choose);
		dialogLoader.getWindow().setLayout(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
		ImageButton uiC_imgbtntake_gallery = (ImageButton) dialogLoader.findViewById(R.id.uiC_imgbtntake_gallery);
		ImageButton uiC_imgbtntake_camera = (ImageButton) dialogLoader.findViewById(R.id.uiC_imgbtntake_camera);
		ImageButton btnYoutube = (ImageButton) dialogLoader.findViewById(R.id.btn_youTube);

		btnYoutube.setVisibility(View.GONE);
		uiC_imgbtntake_gallery.setOnClickListener(new OnClickListener()
		{

			@Override
			public void onClick(View v)
			{

				dialogLoader.dismiss();

				Intent pickPhoto = new Intent(Intent.ACTION_PICK);
				pickPhoto.setType("image/*");
				startActivityForResult(pickPhoto, 22);

			}
		});

		uiC_imgbtntake_camera.setOnClickListener(new OnClickListener()
		{

			@Override
			public void onClick(View v)
			{
				dialogLoader.dismiss();
				Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
				cameraIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, getTempUri());
				cameraIntent.putExtra("return-data", true);
				startActivityForResult(cameraIntent, 1888);

			}
		});

		dialogLoader.show();
	}

	static final String	TEMP_PHOTO_FILE	= "temporary_GroupIMG.jpg";

	private Uri getTempUri()
	{
		return Uri.fromFile(getTempFile());
	}

	private File getTempFile()
	{

		if( Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) )
		{

			File file = new File(Environment.getExternalStorageDirectory(), TEMP_PHOTO_FILE);
			try
			{
				file.createNewFile();
			}
			catch(IOException e)
			{}

			return file;
		}
		else
		{

			return null;
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data)
	{
		switch (requestCode)
		{
		case 22:
			if( resultCode == Activity.RESULT_OK )
			{
				try
				{

					File tempFile = getTempFile();
					String filePathG = Environment.getExternalStorageDirectory() + "/" + TEMP_PHOTO_FILE;

					InputStream inputStream = getContentResolver().openInputStream(data.getData());
					FileOutputStream fileOutputStream = new FileOutputStream(filePathG);
					globalUtills.copyStream(inputStream, fileOutputStream);
					fileOutputStream.close();
					inputStream.close();

					decodeFile(filePathG);

					if( tempFile.exists() )
					{
						tempFile.delete();
					}

				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}

			break;

		case 1888:

			try
			{

				String filePath = null;
				File tempFile = getTempFile();

				filePath = Environment.getExternalStorageDirectory() + "/" + TEMP_PHOTO_FILE;

				if( filePath != null )
				{

					decodeFile(filePath);
				}

				if( tempFile.exists() )
				{
					tempFile.delete();
				}

			}
			catch(RuntimeException e)
			{
				e.printStackTrace();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}

		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	public void decodeFile(String filePath)
	{

		// Decode image size
		BitmapFactory.Options o = new BitmapFactory.Options();
		o.inJustDecodeBounds = true;
		BitmapFactory.decodeFile(filePath, o);

		// The new size we want to scale to
		final int REQUIRED_SIZE = 1024;

		// Find the correct scale value. It should be the power of 2.
		int width_tmp = o.outWidth, height_tmp = o.outHeight;
		int scale = 1;
		while (true)
		{
			if( width_tmp < REQUIRED_SIZE && height_tmp < REQUIRED_SIZE )
				break;
			width_tmp /= 2;
			height_tmp /= 2;
			scale *= 2;
		}

		// Decode with inSampleSize
		BitmapFactory.Options o2 = new BitmapFactory.Options();
		o2.inSampleSize = scale;
		Bitmap bitmap = BitmapFactory.decodeFile(filePath, o2);

		try
		{
			ExifInterface ei = new ExifInterface(filePath);
			int orientation = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
			Matrix matrix = new Matrix();
			switch (orientation)
			{
			case ExifInterface.ORIENTATION_ROTATE_90:
				matrix.postRotate(90);
				bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
				break;
			case ExifInterface.ORIENTATION_ROTATE_180:
				matrix.postRotate(180);
				bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
				break;
			case ExifInterface.ORIENTATION_ROTATE_270:
				matrix.postRotate(270);
				bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
				break;
			default:
				bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
				break;
			}
		}
		catch(Throwable e)
		{
			e.printStackTrace();
		}

		System.out.println(filePath.toString() + "filepath is");

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);

		imgVeditprofile.setImageBitmap(Facebook_ProfilePictureView_rounded.getRoundedBitmap(bitmap));

		imgbytesGroupIcon = globalUtills.BitMapToString(bitmap);

		imgORnot = true;

		// uiC_imgV_DP.setImageBitmap(bitmap);

	}

	// image all stuff end

	public void show_added_friends()
	{

		layout_addedfriends.setVisibility(View.VISIBLE);
		layout_addedfriends.removeAllViews();

		TextView tvtitle = new TextView(getApplicationContext());
		tvtitle.setTextColor(Color.BLACK);
		tvtitle.setText("Selected fb friends (" + friend_id.size() + ") :");
		layout_addedfriends.addView(tvtitle);

		for( int i = 0; i < friend_id.size(); i++ )
		{

			LinearLayout.LayoutParams lpLayout = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
			lpLayout.gravity = Gravity.CENTER_HORIZONTAL;

			Facebook_ProfilePictureView_rounded addedFriends = new Facebook_ProfilePictureView_rounded(getApplicationContext());
			addedFriends.setLayoutParams(lpLayout);
			addedFriends.setProfileId(friend_id.get(i));

			layout_addedfriends.addView(addedFriends);
		}

		if( phone_no.size() > 0 )
		{

			TextView tvtitle2 = new TextView(getApplicationContext());
			tvtitle2.setTextColor(Color.BLACK);
			tvtitle2.setText("Selected phone contacts (" + phone_no.size() + ") :");
			layout_addedfriends.addView(tvtitle2);

			for( int g = 0; g < phone_no.size(); g++ )
			{

				LinearLayout.LayoutParams lpLayout = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				lpLayout.gravity = Gravity.CENTER_HORIZONTAL;
				TextView tvName = new TextView(getApplicationContext());
				tvName.setTextColor(Color.parseColor("#fc6278"));
				tvName.setText(phone_no.get(g) + "");
				tvName.setLayoutParams(lpLayout);
				layout_addedfriends.addView(tvName);
			}
		}

	}

	// end show added friends

	// send image
	class groupImagesend extends AsyncTask<String , String , String>
	{

		String	response_sendimage;
		String	messaString;

		@Override
		protected String doInBackground(String... params)
		{

			String GroupID = params[0];

			ArrayList<NameValuePair> param = new ArrayList<NameValuePair>();
			// param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE,
			// "post"));
			// param.add(new
			// BasicNameValuePair(GlobalConstant.U_TYPE,"up_group"));

			param.add(new BasicNameValuePair("group_id", GroupID));
			param.add(new BasicNameValuePair("gimage", imgbytesGroupIcon));

			// param.add(new BasicNameValuePair("name", group_name+""));

			try
			{
				WebServiceHandler web = new WebServiceHandler();
				response_sendimage = web.makeServiceCall(GlobalConstant.URL + "?post_type=post&mtype=up_group", WebServiceHandler.POST, param);

			}
			catch(Exception exception)

			{
				exception.printStackTrace();
				System.out.println("Exception calling");
			}

			return response_sendimage;

		}

		@Override
		protected void onPreExecute()
		{
			super.onPreExecute();

		}

		protected void onPostExecute(String result)
		{

			hashMap_getids.clear();

			global.clearhashMAp();
			global.clearhashMAp_ph();
			phone_no.clear();
			friend_id.clear();

			AddSocialFriendAdapter.radio_checkCONtacts.clear();
			ShowSocialFriends.radio_checkGroup.clear();
			Aroundme_users.radio_checkAroundME.clear();

			appended_phone_no = "";
			appended_friend_ids = "";

			Toast.makeText(getApplicationContext(), "Group Created Successfully", 200).show();

			btn_create_group.setVisibility(View.VISIBLE);

			dialog.dismiss();

			finish();

			super.onPostExecute(result);
		}
	}
	// end send imnage

}
