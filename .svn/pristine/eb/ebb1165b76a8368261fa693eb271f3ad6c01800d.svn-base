package com.app.messenger;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.accounts.AccountManager;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.app.model.FriendInfo;
import com.app.util.GlobalUtills;
import com.app.util.NetworkCheck;
import com.app.util.TransparentProgressDialog;
import com.app.webserviceshandler.WebServiceHandler;
import com.facebook.FacebookException;
import com.facebook.FacebookOperationCanceledException;
import com.facebook.Request;
import com.facebook.Request.Callback;
import com.facebook.Request.GraphUserListCallback;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionLoginBehavior;
import com.facebook.SessionState;
import com.facebook.android.AsyncFacebookRunner;
import com.facebook.android.DialogError;
import com.facebook.android.Facebook;
import com.facebook.android.Facebook.DialogListener;
import com.facebook.android.FacebookError;
import com.facebook.model.GraphUser;
import com.facebook.widget.FacebookDialog.ShareDialogBuilder;
import com.facebook.widget.LoginButton;
import com.facebook.widget.WebDialog;
import com.facebook.widget.WebDialog.OnCompleteListener;

@SuppressWarnings("deprecation")
public class LoginActivity extends Activity implements OnClickListener
{

	private LoginButton			loginButton;

	LinearLayout				gmailLogin, facbookLogin;
	FriendInfo					friendInfo;
	Context						mContext				= LoginActivity.this;
	AccountManager				mAccountManager;
	private Facebook			facebook;
	String						FAcebook_id;
	private AsyncFacebookRunner	mAsyncRunner;

	// private static String FACEBOOK_APP_ID = "649385061834207";

	private static String		FACEBOOK_APP_ID			= "1409731509334926";
	// private static String FACEBOOK_APP_ID = "797481916954968";

	String						gender, name, fb_token, image_path, fb_id, first_name = "", last_name = "", email = "", message = "", userid = "";
	TransparentProgressDialog	pd;

	Global						global;
	ArrayList<FriendInfo>		friend_info_list		= new ArrayList<FriendInfo>();
	HashMap<String , String>	map;
	String						FBID_checkValidation	= "";
	public static final String	SCOPE					= "oauth2:https://www.googleapis.com/auth/userinfo.profile";

	private static final String	TOKEN					= "access_token";
	private static final String	EXPIRES					= "expires_in";
	private static final String	KEY						= "facebook-credentials";
	Session						fb_session				= null;

	GlobalUtills				globalUtills;

	Callback					callbackManager;
	ShareDialogBuilder			shareDialog;

	@Override
	protected void onResume()
	{
		// TODO Auto-generated method stub
		super.onResume();

		fb_session = Session.getActiveSession();
		if( fb_session != null && fb_session.isOpened() )
		{

			// new
			// loginStatus_notification().execute("Y",global.getUser_id());

			loginButton.setVisibility(View.GONE);
			pd = new TransparentProgressDialog(LoginActivity.this, R.drawable.loading_spinner_icon);

			String fbToken = "" + fb_session.getAccessToken();
			fb_token = fbToken;
			global = new Global();
			global.setFbtoken(fbToken);

			postStatusImage();

		}
		else
		{
			loginButton.setVisibility(View.VISIBLE);
			// GlobalUtills.showToast("sesion closed", LoginActivity.this);
		}
	}

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.login_screen);

		global = new Global();
		globalUtills = new GlobalUtills();

		gettingIds();
		loginButton = (LoginButton) findViewById(R.id.login_button);

		loginButton.setPublishPermissions(Arrays.asList(new String[ ] { "email", "publish_actions", "public_profile", "read_friendlists", "user_friends" }));
		// loginButton.setReadPermissions("public_profile", "email",
		// "user_friends", "user_birthday",
		// "read_friendlists","publish_actions");
		loginButton.setApplicationId(FACEBOOK_APP_ID);

		gmailLogin.setOnClickListener(this);
		facbookLogin.setOnClickListener(this);

		facebook = new Facebook(FACEBOOK_APP_ID);
		restoreCredentials(facebook);

		mAsyncRunner = new AsyncFacebookRunner(facebook);

	}

	public void gettingIds()
	{
		gmailLogin = (LinearLayout) findViewById(R.id.gmail_login);
		facbookLogin = (LinearLayout) findViewById(R.id.facebook_login);

	}

	@Override
	public void onClick(View v)
	{

		if( globalUtills.haveNetworkConnection(LoginActivity.this) )
		{

			switch (v.getId())
			{
			case R.id.gmail_login:

				// ();

				break;

			case R.id.facebook_login:

				if( !NetworkCheck.getConnectivityStatusString(LoginActivity.this).equalsIgnoreCase("true") )
				{
					NetworkCheck.openInternetDialog(LoginActivity.this);
				}
				else
				{

					loginToFacebook();

					Log.e("callled fb", "methos");

				}
			}

		}
		else
		{
			GlobalUtills.showToast("No network connection..!", LoginActivity.this);
		}

	}

	// -----gagan
	public boolean saveCredentials(Facebook facebook)
	{
		Editor editor = getApplicationContext().getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
		editor.putString(TOKEN, facebook.getAccessToken());
		editor.putLong(EXPIRES, facebook.getAccessExpires());
		return editor.commit();
	}

	public boolean restoreCredentials(Facebook facebook)
	{
		SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences(KEY, Context.MODE_PRIVATE);
		facebook.setAccessToken(sharedPreferences.getString(TOKEN, null));
		facebook.setAccessExpires(sharedPreferences.getLong(EXPIRES, 0));
		return facebook.isSessionValid();
	}

	// -----gagan

	private void loginToFacebook()
	{

		Session s = new Session(LoginActivity.this);
		Session.setActiveSession(s);
		Session.OpenRequest request = new Session.OpenRequest(LoginActivity.this);
		request.setPermissions(Arrays.asList("public_profile", "email", "user_friends", "user_birthday"));
		request.setLoginBehavior(SessionLoginBehavior.SUPPRESS_SSO);
		request.setCallback(new Session.StatusCallback()
		{
			public void call(Session session, SessionState state, Exception exception)
			{
				if( session.isOpened() )
				{

					pd = new TransparentProgressDialog(LoginActivity.this, R.drawable.loading_spinner_icon);
					pd.show();
					String fbToken = "" + session.getAccessToken();
					fb_token = fbToken;

					global.setFbtoken(fbToken);

					Viewdetails();
				}
				else
				{

				}
			}
		});
		s.openForRead(request);
	}

	private void Viewdetails()
	{

		List<String> permissions = new ArrayList<String>();
		permissions.add("email");
		Request request = Request.newMeRequest(Session.getActiveSession(), new Request.GraphUserCallback()
		{

			@Override
			public void onCompleted(GraphUser user, Response response)
			{
				if( user != null )
				{
					try
					{

						pd.dismiss();

						saveCredentials(facebook);

						fb_id = user.getId().toString();
						first_name = user.getFirstName();
						FAcebook_id = user.getId().toString();
						last_name = user.getLastName();
						image_path = "https://graph.facebook.com/" + fb_id + "/picture";
						email = user.getProperty("email").toString();

						name = user.getName().toString();
						gender = user.getProperty("gender").toString();

						getFriends();
					}
					catch(Exception e)
					{

						Log.d("Error", "Error parsing returned user data.");
						if( pd.isShowing() )
						{
							pd.dismiss();
						}

					}
					if( NetworkCheck.checkInternetConnection(mContext) == true )
					{

						SharedPreferences sharedPref = getSharedPreferences("login", MODE_PRIVATE);
						Editor editorPref = sharedPref.edit();
						String reg_ph_no = sharedPref.getString("ph_no", "----");
						System.out.println("My facebook id is " + fb_id);
						System.out.println("My email_id id is " + email);
						System.out.println("My global.email_id is " + GlobalUtills.email_id);
						// GlobalUtills.showToast(GlobalUtills.email_id
						// + "------" + "email",
						// LoginActivity.this);
						if( !(GlobalUtills.email_id.equals("")) && !(email.equals(GlobalUtills.email_id)) )
						{

							GlobalUtills.showToast(email + " is not associated with the " + reg_ph_no + " number.", LoginActivity.this);
							Session fb_session = Session.getActiveSession();
							Intent intent = new Intent(LoginActivity.this, PhoneNumberRegistertationScreen.class);
							startActivity(intent);
							LoginActivity.this.finish();
							fb_session = Session.getActiveSession();
							if( fb_session.isOpened() )
							{
								fb_session.close();
							}
							// /////
						}
						else
						{
							editorPref.putString("FbID", fb_id + "");
							editorPref.putString("email", email + "");
							editorPref.commit();
							SharedPreferences sharedPrefFB = getSharedPreferences("fbID", MODE_PRIVATE);
							Editor ed = sharedPrefFB.edit();
							ed.putString("fb", fb_id);
							ed.commit();

							if( pd.isShowing() )
							{
								pd.dismiss();
							}

							new RegistrationByFacebook().execute();

							GlobalUtills.showToast("Logged in successfully", LoginActivity.this);
							Intent intent = new Intent(LoginActivity.this, Tab.class);
							startActivity(intent);
							finish();
						}

						// } else if (GlobalUtills.email_id.equals(""))
						// {
						// editorPref.putString("FbID", fb_id + "");
						// editorPref.putString("email", email + "");
						// editorPref.commit();
						// SharedPreferences sharedPrefFB =
						// getSharedPreferences(
						// "fbID", MODE_PRIVATE);
						// Editor ed = sharedPrefFB.edit();
						// ed.putString("fb", fb_id);
						// ed.commit();
						// new RegistrationByFacebook().execute();
						// } else {
						//
						// }
					}
					else
					{
						GlobalUtills.showToast("Check your internet connection", LoginActivity.this);
					}
					/*
					 * Intent facebookLogin_intent = new
					 * Intent(LoginActivity.this, Tab.class);
					 * startActivity(facebookLogin_intent);
					 */
				}
				else if( response.getError() != null )
				{}
			}
		});
		request.executeAsync();
	}

	private void getFriends()
	{
		Session activeSession = Session.getActiveSession();
		if( activeSession.getState().isOpened() )
		{
			Request friendRequest = Request.newMyFriendsRequest(activeSession, new GraphUserListCallback()
			{
				public void onCompleted(List<GraphUser> users, Response response)
				{

					// ArrayList<HashMap<String, String>> friend_list_array =
					// new
					// ArrayList<HashMap<String, String>>();

					String friend_list = response.getGraphObject().getProperty("data").toString();

					SharedPreferences sharedPref = getSharedPreferences("FacebookFrnd", MODE_PRIVATE);
					Editor editorPref = sharedPref.edit();
					editorPref.clear();
					editorPref.commit();
					editorPref.putString("FriendList", friend_list + "");
					editorPref.commit();

					SetFriendInfo_Json();

				}
			});

			Bundle params = new Bundle();
			params.putString("fields", "id,name,email,picture,gender");
			friendRequest.setParameters(params);
			friendRequest.executeAsync();
		}
	}

	public void onActivityResult(int requestCode, int resultCode, Intent data)
	{

		super.onActivityResult(requestCode, resultCode, data);
		try
		{
			Session.getActiveSession().onActivityResult(LoginActivity.this, requestCode, resultCode, data);

			Log.e("Returned", "returned");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unused")
	private static Session openActiveSession(Activity activity, boolean allowLoginUI, Session.StatusCallback callback, List<String> permissions)
	{
		Session.OpenRequest openRequest = new Session.OpenRequest(activity).setPermissions(permissions).setCallback(callback);
		Session session = new Session.Builder(activity).build();
		if( SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowLoginUI )
		{
			Session.setActiveSession(session);
			session.openForRead(openRequest);
			return session;
		}
		return null;
	}

	// public class EmailExist extends AsyncTask<String, Void, String> {
	// String message;
	// String email_id;
	// String UserID;
	//
	// @Override
	// protected void onPreExecute() {
	// super.onPreExecute();
	// pd =new TransparentProgressDialog(LoginActivity.this,
	// R.drawable.loading_spinner_icon);
	// pd.show();
	// }
	//
	// @Override
	// protected String doInBackground(String... params) {
	// email_id = params[0];
	//
	// List<NameValuePair> param = new ArrayList<NameValuePair>();
	// param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE, "post"));
	// param.add(new BasicNameValuePair(GlobalConstant.U_TYPE, "isexits"));
	// param.add(new BasicNameValuePair(GlobalConstant.ISEMAIL, email_id));
	//
	// Log.e("Param if exist: ", "> " + param);
	// Log.e("Method is calling ", "In doing back ground");
	//
	// WebServiceHandler web=new WebServiceHandler();
	// String jsonString = web.makeServiceCall(
	// GlobalConstant.URL, WebServiceHandler.GET, param);
	//
	// Log.e("Response from emailexisit ", jsonString);
	// return jsonString;
	//
	// }
	//
	// @Override
	// protected void onPostExecute(String result) {
	// super.onPostExecute(result);
	//
	// if (result.equals("Error! Try Again")) {
	// pd.dismiss();
	//
	// Toast.makeText(LoginActivity.this, result, Toast.LENGTH_LONG)
	// .show();
	// } else {
	// try {
	// JSONObject jsonObject = new JSONObject(result);
	// message = jsonObject.getString("Message");
	//
	// if (message.equalsIgnoreCase("Failure")) {
	//
	// pd.dismiss();
	//
	// sendRequestDialog();
	//
	// } else {
	//
	// pd.dismiss();
	//
	// UserID = jsonObject.getString("userId");
	// global.setUser_id(UserID);
	//
	// SharedPreferences sharedPref = getSharedPreferences(
	// "login", MODE_PRIVATE);
	// Editor editorPref = sharedPref.edit();
	// editorPref.putString("UserID", UserID + "");
	// editorPref.commit();
	//
	// Toast.makeText(LoginActivity.this,
	// "You have Successfully logged in..!",
	// Toast.LENGTH_LONG).show();
	//
	//
	//
	// Intent face_book_register = new Intent(
	// LoginActivity.this, Tab.class);
	// startActivity(face_book_register);
	//
	// finish();
	//
	// }
	// Log.e("message", message.toString());
	// } catch (JSONException e) {
	// System.out.println("Exception in the main object");
	// e.printStackTrace();
	// }
	// }
	//
	// }
	//
	// }

	// gagan
	public void SetFriendInfo_Json()
	{
		try
		{
			// creating JSONaqDa

			if( !friend_info_list.isEmpty() )
			{
				friend_info_list.clear();
			}

			ArrayList<HashMap<String , String>> friend_list_array = new ArrayList<HashMap<String , String>>();

			SharedPreferences sharedPref = getSharedPreferences("FacebookFrnd", MODE_PRIVATE);
			String friend_list = sharedPref.getString("FriendList", "");

			JSONArray jSonArr = new JSONArray();
			JSONArray jarr = new JSONArray(friend_list);
			for( int i = 0; i < jarr.length(); i++ )
			{
				JSONObject obj = jarr.getJSONObject(i);
				JSONObject picture = obj.getJSONObject("picture");
				JSONObject jsonObject_url = picture.getJSONObject("data");

				String id = obj.getString("id");
				friendInfo = new FriendInfo();
				String IMAGE_URL = jsonObject_url.getString("url");

				Log.e("Friend ID", id);
				friendInfo.setId(id);
				String name = obj.getString("name");
				friendInfo.setImage(IMAGE_URL);

				HashMap<String , String> map = new HashMap<String , String>();
				map.put("id", id);
				friend_list_array.add(map);
				JSONObject pnObj = new JSONObject();
				pnObj.put("userid", id);
				Log.e("list of friends ", "" + friend_list_array.size());
				Log.e("Friends Detail  ", "" + friend_list_array.toString());
				jSonArr.put(pnObj);

				friendInfo.setName(name);
				// friend_info_list.add(friendInfo);

				if( FBID_checkValidation.equals("") )
				{
					FBID_checkValidation = id + "";
				}
				else
				{
					FBID_checkValidation = FBID_checkValidation + "," + id;
				}

			}

		}
		catch(JSONException e)
		{
			e.printStackTrace();
		}
		// global.setFriend_info_list(friend_info_list);

		new Getvalid_frnds().execute();

	}

	private void sendRequestDialog()
	{

		Bundle params = new Bundle();
		params.putString("title", "get groupy");
		params.putString("message", "hi i am using groupy");
		// params.putString("to", "12343543,32423534");

		WebDialog requestsDialog = (new WebDialog.RequestsDialogBuilder(LoginActivity.this, Session.getActiveSession(), params)).setOnCompleteListener(new OnCompleteListener()
		{

			@Override
			public void onComplete(Bundle values, FacebookException error)
			{
				if( error != null )
				{
					if( error instanceof FacebookOperationCanceledException )
					{
						// Toast.makeText(
						// LoginActivity.this
						// .getApplicationContext(),
						// "Request cancelled", Toast.LENGTH_SHORT)
						// .show();
					}
					else
					{
						Toast.makeText(LoginActivity.this.getApplicationContext(), "Network Error", Toast.LENGTH_SHORT).show();
					}
				}
				else
				{
					final String requestId = values.getString("request");
					if( requestId != null )
					{
						Toast.makeText(LoginActivity.this.getApplicationContext(), "Request sent", Toast.LENGTH_SHORT).show();

					}
					else
					{
						// Toast.makeText(
						// LoginActivity.this
						// .getApplicationContext(),
						// "Request cancelled", Toast.LENGTH_SHORT)
						// .show();

					}
				}

				Intent intent = new Intent(LoginActivity.this, Tab.class);
				startActivity(intent);
				finish();
			}

		}).build();
		requestsDialog.show();
	}

	// register user
	class RegistrationByFacebook extends AsyncTask<Void , Void , String>
	{
		// TransparentProgressDialog dialog;

		String	message;

		String	responseG	= "";

		String	country;
		String	ph_no;
		String	UserId;

		@Override
		protected void onPreExecute()
		{
			super.onPreExecute();

			// dialog =new TransparentProgressDialog(LoginActivity.this,
			// R.drawable.loading_spinner_icon);
			// dialog.show();
		}

		@Override
		protected String doInBackground(Void... params)
		{

			SharedPreferences sharedPref = getSharedPreferences("login", MODE_PRIVATE);
			country = sharedPref.getString("country", "India");
			ph_no = sharedPref.getString("ph_no", "2");
			UserId = sharedPref.getString("UserID", "2");

			List<NameValuePair> param = new ArrayList<NameValuePair>();
			param.add(new BasicNameValuePair(GlobalConstant.POST_TYPE, "post"));
			param.add(new BasicNameValuePair(GlobalConstant.U_TYPE, "register"));

			param.add(new BasicNameValuePair(GlobalConstant.FirstName, first_name));
			param.add(new BasicNameValuePair(GlobalConstant.COUNTRY, country));
			// param.add(new BasicNameValuePair(GlobalConstant.U_TYPE,
			// "register"));
			param.add(new BasicNameValuePair(GlobalConstant.FACE_BOOK_ID, FAcebook_id));
			param.add(new BasicNameValuePair(com.app.util.GlobalConstant.EMAIL, email));
			param.add(new BasicNameValuePair(GlobalConstant.PHONE_NUMBER, ph_no));
			param.add(new BasicNameValuePair(GlobalConstant.IS_SOCIAL, "Y"));
			param.add(new BasicNameValuePair("userId", UserId));

			try
			{
				WebServiceHandler web = new WebServiceHandler();
				responseG = web.makeServiceCall(GlobalConstant.URL, WebServiceHandler.GET, param);

			}
			catch(Exception exception)
			{

				exception.printStackTrace();

			}

			return responseG;

		}

		protected void onPostExecute(String result)
		{

			try
			{
				// if (dialog.isShowing()) {
				// dialog.dismiss();
				// }

				if( result.equals("Error! Try Again") )
				{

					Log.e("post", "" + result);
					Toast.makeText(LoginActivity.this, result, Toast.LENGTH_LONG).show();
				}
				else
				{

					JSONObject jsonObject;

					jsonObject = new JSONObject(responseG);

					message = jsonObject.getString("Message");
					if( message.equals("Success") )
					{
						String uID = UserId;

						System.out.println(uID + "userID is");

						global.setUser_id(uID);

						// SharedPreferences sharedPref =
						// getSharedPreferences("", MODE_PRIVATE);
						// Editor editorPref=sharedPref.edit();
						// editorPref.putString("UserID", uID+"");
						// editorPref.commit();

						// Toast.makeText(LoginActivity.this,
						// "You have Successfully Registered..! ", 200)
						// .show();

						sendRequestDialog();

					}
					else
					{
						Toast.makeText(LoginActivity.this, "Error..!", 200).show();
					}

				}
			}
			catch(JSONException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			super.onPostExecute(result);
		}
	}

	// get valid friends from fb
	public class Getvalid_frnds extends AsyncTask<Void , Void , String>
	{
		String	message;

		@Override
		protected void onPreExecute()
		{
			super.onPreExecute();

		}

		@Override
		protected String doInBackground(Void... params)
		{

			List<NameValuePair> param = new ArrayList<NameValuePair>();
			param.add(new BasicNameValuePair("post_type", "post"));
			param.add(new BasicNameValuePair("mtype", "get_valid_fb_users"));
			param.add(new BasicNameValuePair("users", FBID_checkValidation));

			Log.e("Param Getvalid_frnds: ", "> " + param);

			WebServiceHandler web = new WebServiceHandler();
			String jsonString = web.makeServiceCall(GlobalConstant.URL, WebServiceHandler.GET, param);

			Log.e("Response from get_countries ", jsonString);
			return jsonString;

		}

		@Override
		protected void onPostExecute(String result)
		{

			try
			{

				if( !friend_info_list.isEmpty() )
				{
					friend_info_list.clear();
				}

				// {"Message":"Success","users":[]}

				JSONObject jsonResponse = new JSONObject(result);

				if( jsonResponse.getString("Message").equalsIgnoreCase("Success") )
				{
					JSONArray jsonArr = jsonResponse.getJSONArray("users");

					for( int g = 0; g < jsonArr.length(); g++ )
					{
						FriendInfo friend = new FriendInfo();
						JSONObject innerJson = jsonArr.getJSONObject(g);

						friend.setId(innerJson.getString("facebook_id"));
						friend.setName(innerJson.getString("user_name"));
						friend.setMobile_no(innerJson.getString("user_telephone"));

						friend_info_list.add(friend);
					}
					global.setFriend_info_list(friend_info_list);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
			}

			super.onPostExecute(result);
		}

	}

	// end get valid friends from fb

	// post on fb
	public void postStatusImage()
	{

		Bundle parameters = new Bundle();
		parameters.putString("name", "GetGroupy");
		parameters.putString("link", "https://play.google.com/store/apps/details?id=com.app.messenger&hl=en");
		// parameters.putString("picture",
		// "http://www.hdwallpapersinn.com/wp-content/uploads/2015/02/flowers-660x330.jpg");
		parameters.putString("message", "Hey ..! i found get-groupy an osm application to connect with your friends..");
		// parameters.putString("app_id", "228476323938322");

		facebook.dialog(LoginActivity.this, "feed", parameters, new DialogListener()
		{

			@Override
			public void onComplete(Bundle values)
			{
				Viewdetails();
				System.out.println(values.toString());
			}

			@Override
			public void onCancel()
			{
				Viewdetails();
				System.out.println("ggagamn");

			}

			@Override
			public void onFacebookError(FacebookError e)
			{
				Viewdetails();
				System.out.println("ggagamn");

			}

			@Override
			public void onError(DialogError e)
			{
				Viewdetails();
				System.out.println("ggagamn");

			}

		});

		// facebook.setPublishPermissions(Arrays.asList(new String[]{"email",
		// "publish_actions"}));
		// Bundle params = new Bundle();
		// params.putString("message",
		// "Hey ..! i found get-groupy an osm application to connect with your friends..");
		// params.putString("caption", "GetGroupy");
		// // params.putByteArray("picture", data);
		// params.putString("link",
		// "https://play.google.com/store/apps/details?id=com.app.messenger&hl=en");
		//
		// // params.putString("picture",
		// //
		// "http://www.hdwallpapersinn.com/wp-content/uploads/2015/02/flowers-660x330.jpg");
		//
		// Request requests1 = new Request(Session.getActiveSession(),
		// "me/feed", null, HttpMethod.POST);
		// requests1.setParameters(params);
		// requests1.setCallback(new Request.Callback()
		// {
		//
		// @Override
		// public void onCompleted(Response response)
		// {
		//
		// response.toString();
		//
		// response.toString();
		// }
		// });
		// requests.add(requests1);

		// requests1.executeAsync();
	}
	// end post on fb

}
